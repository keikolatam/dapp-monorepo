{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf93 Keiko Latam - Plataforma de Colaboraci\u00f3n Educativa Descentralizada","text":"<ul> <li> <p> Para Educadores</p> <p>Libera tu potencial educativo sin intermediarios. Monetiza sesiones individuales o grupales y construye tu reputaci\u00f3n verificable en blockchain.</p> <p> Gu\u00eda para Educadores</p> </li> <li> <p> Para Estudiantes</p> <p>Construye tu Pasaporte de Aprendizaje de Vida inmutable. Demuestra tu conocimiento con evidencia verificable e infalsificable.</p> <p> Gu\u00eda para Estudiantes</p> </li> <li> <p> Para Instituciones</p> <p>Integra tu LRS existente con Keiko. Transfiere autom\u00e1ticamente registros de aprendizaje al ecosistema blockchain.</p> <p> Gu\u00eda de Integraci\u00f3n</p> </li> <li> <p> Para Desarrolladores</p> <p>Contribuye al futuro de la educaci\u00f3n descentralizada. Arquitectura modular en Rust, contratos Cairo y frontend Flutter.</p> <p> Gu\u00eda de Desarrollo</p> </li> </ul>"},{"location":"#que-es-keiko","title":"\ud83c\udf1f \u00bfQu\u00e9 es Keiko?","text":"<p>Keiko es una plataforma de colaboraci\u00f3n educativa descentralizada (DApp) que transforma el aprendizaje en capital humano verificable mediante blockchain. La plataforma permite a cualquier individuo construir y demostrar su Pasaporte de Aprendizaje de Vida (LifeLearningPassport) en blockchain, mediante una sucesi\u00f3n de interacciones de aprendizaje at\u00f3micas (LearningInteractions) compatibles con el est\u00e1ndar xAPI (Tin Can).</p>"},{"location":"#proposito-y-objetivo","title":"\ud83c\udfaf Prop\u00f3sito y Objetivo","text":"<p>El prop\u00f3sito de Keiko es estandarizar el mecanismo de verificaci\u00f3n de adquisici\u00f3n de conocimientos a escala Latinoam\u00e9rica, sin importar el pa\u00eds de origen ni la condici\u00f3n socioecon\u00f3mica de cada estudiante, para poder dejar obsoletas las certificaciones tradicionales y priorizar el encadenamiento de las evidencias de aprendizaje sobre la confianza ciega en actores educativos.</p> <p>El objetivo principal es lograr que sea imposible adulterar cualquier evidencia de los estudios de cualquier ser humano a trav\u00e9s de su vida, para esto se requiere que las interacciones de aprendizaje sean:</p> <ul> <li>\u2705 Almacenadas de forma descentralizada</li> <li>\u2705 P\u00fablicamente verificables por m\u00faltiples actores</li> <li>\u2705 Inmutables e infalsificables</li> </ul>"},{"location":"#los-cuatro-pilares-de-keiko","title":"\ud83c\udfdb\ufe0f Los Cuatro Pilares de Keiko","text":"<ul> <li> <p> Libertad Econ\u00f3mica</p> <p>Los educadores pueden escoger monetizar sesiones individuales o grupales sin intermediarios.</p> </li> <li> <p> Democracia Participativa</p> <p>Los aprendices califican la calidad del conocimiento adquirido y de sus pares.</p> </li> <li> <p> Descentralizaci\u00f3n</p> <p>Las comunidades regulan sus propios est\u00e1ndares y m\u00e9todos de validaci\u00f3n.</p> </li> <li> <p> Auto-determinaci\u00f3n</p> <p>Cada red o nodo puede establecer su propia gobernanza educativa.</p> </li> </ul>"},{"location":"#arquitectura-hibrida","title":"\ud83c\udfd7\ufe0f Arquitectura H\u00edbrida","text":"<p>Keiko utiliza una arquitectura h\u00edbrida de 5 capas que combina las ventajas de blockchain con la simplicidad de una aplicaci\u00f3n monol\u00edtica modular:</p> <pre><code>graph TB\n    subgraph \"Frontend Layer\"\n        A[Flutter App&lt;br/&gt;Web/Mobile]\n    end\n\n    subgraph \"API Layer\"\n        B[API Gateway&lt;br/&gt;GraphQL + Redis Streams]\n    end\n\n    subgraph \"Backend Layer\"\n        C[Backend Monol\u00edtico&lt;br/&gt;Rust + PostgreSQL + Redis]\n    end\n\n    subgraph \"gRPC Gateway Layer\"\n        D[Traductor Rust \u2194 Cairo&lt;br/&gt;Starknet Appchain]\n    end\n\n    subgraph \"Appchain Layer\"\n        E[Keikochain&lt;br/&gt;Cairo Smart Contracts]\n    end\n\n    A --&gt;|GraphQL| B\n    B --&gt;|HTTP/REST| C\n    C --&gt;|gRPC| D\n    D --&gt;|Starknet RPC| E</code></pre>"},{"location":"#flujos-de-datos","title":"\ud83d\udcca Flujos de Datos","text":"<ul> <li>\ud83d\udcdd Escritura: Flutter \u2192 GraphQL \u2192 HTTP/REST \u2192 Backend \u2192 gRPC Gateway \u2192 Keikochain Contract \u2192 Evento Redis \u2192 GraphQL Subscription</li> <li>\ud83d\udcd6 Lectura: Flutter \u2192 GraphQL \u2192 HTTP/REST \u2192 Backend \u2192 Cache PostgreSQL \u2192 (fallback) gRPC Gateway \u2192 Keikochain Contract</li> <li>\u26a1 Tiempo Real: Keikochain Contract \u2192 gRPC Gateway \u2192 Backend \u2192 Redis Streams \u2192 API Gateway \u2192 GraphQL Subscription \u2192 Flutter</li> <li>\ud83d\udce5 Importaci\u00f3n: LRS Externos \u2192 REST Webhooks \u2192 API Gateway \u2192 HTTP/REST \u2192 Backend \u2192 gRPC Gateway \u2192 Keikochain Contract</li> </ul>"},{"location":"#proof-of-humanity-con-zkproofs","title":"\ud83d\udd10 Proof-of-Humanity con zkProofs","text":"<p>Keiko implementa un sistema \u00fanico de Proof-of-Humanity que garantiza que cada interacci\u00f3n de aprendizaje proviene de una persona humana real, sin comprometer la privacidad de los datos biom\u00e9tricos:</p>"},{"location":"#caracteristicas-de-seguridad","title":"\ud83d\udee1\ufe0f Caracter\u00edsticas de Seguridad","text":"<ul> <li>\ud83d\udd12 Autenticaci\u00f3n Biom\u00e9trica Off-Chain: Procesamiento de iris (Gabor filters) y genoma (SNPs en VCF/FASTA)</li> <li>\ud83d\udd11 Composite Key: <code>sha256(iris_hash || genoma_hash || salt)</code> generada off-chain</li> <li>\ud83d\udd10 Privacidad: Los datos biom\u00e9tricos originales nunca se almacenan en blockchain</li> <li>\u2705 Verificaci\u00f3n con Pruebas STARK: STARKs para verificar humanidad sin exponer datos</li> <li>\ud83d\udd04 Recuperaci\u00f3n de Identidad: Los usuarios pueden recuperar su identidad de aprendizaje con la misma humanity_proof_key</li> </ul>"},{"location":"#empezar-ahora","title":"\ud83d\ude80 Empezar Ahora","text":"<p>\u00bfNuevo en Keiko?</p> <p>Si es tu primera vez con Keiko, te recomendamos seguir nuestra gu\u00eda de Instalaci\u00f3n r\u00e1pida para tener todo funcionando en menos de 10 minutos.</p>"},{"location":"#opciones-de-instalacion","title":"Opciones de Instalaci\u00f3n","text":"\ud83d\udc27 Linux / WSL2\ud83c\udf4e macOS\ud83d\udc33 Docker <pre><code># Clonar el repositorio\ngit clone https://github.com/keikolatam/dapp-monorepo.git\ncd dapp-monorepo\n\n# Configuraci\u00f3n r\u00e1pida\nmake dev-setup\n</code></pre> <pre><code># Instalar dependencias con Homebrew\nbrew install rust cairo flutter docker\n\n# Configuraci\u00f3n r\u00e1pida\nmake dev-setup\n</code></pre> <pre><code># Usar Docker Compose para desarrollo\ndocker-compose up -d\n</code></pre>"},{"location":"#estado-del-desarrollo","title":"\ud83d\udcc8 Estado del Desarrollo","text":"<ul> <li> <p>:material-blockchain:{ .lg .middle } Keikochain Layer</p> <p>\ud83d\udd04 Reiniciando - Contratos Cairo en Starknet Appchain</p> <ul> <li> Configuraci\u00f3n base Cairo/Starknet</li> <li> Contrato Proof-of-Humanity</li> <li> Contrato Learning Interactions</li> <li> Contrato Life Learning Passport</li> </ul> <p> Ver progreso</p> </li> <li> <p> Backend Layer</p> <p>\ud83d\udea7 En Desarrollo - Aplicaci\u00f3n monol\u00edtica modular en Rust</p> <ul> <li> M\u00f3dulo de Identidad</li> <li> M\u00f3dulo Proof-of-Humanity</li> <li> M\u00f3dulo de Aprendizaje</li> <li> M\u00f3dulo de Reputaci\u00f3n</li> </ul> <p> Ver progreso</p> </li> <li> <p> API Gateway</p> <p>\ud83d\udccb Pendiente - GraphQL + REST endpoints</p> <ul> <li> Servidor GraphQL</li> <li> Panel Admin Leptos</li> <li> Integraci\u00f3n LRS</li> </ul> <p> Ver progreso</p> </li> <li> <p> Frontend</p> <p>\ud83d\udccb Pendiente - Aplicaci\u00f3n Flutter multiplataforma</p> <ul> <li> Aplicaci\u00f3n Flutter</li> <li> Visualizaci\u00f3n cronol\u00f3gica</li> <li> Marketplace m\u00f3vil</li> </ul> <p> Ver progreso</p> </li> </ul>"},{"location":"#unete-a-la-comunidad","title":"\ud83e\udd1d \u00danete a la Comunidad","text":"<ul> <li> <p> GitHub</p> <p>C\u00f3digo fuente, issues y contribuciones</p> <p> Visitar GitHub</p> </li> <li> <p>:material-discord:{ .lg .middle } Discord</p> <p>Comunidad activa de desarrolladores y educadores</p> <p> Unirse a Discord</p> </li> <li> <p> Twitter</p> <p>\u00daltimas noticias y actualizaciones del proyecto</p> <p> Seguir en Twitter</p> </li> <li> <p> LinkedIn</p> <p>Red profesional y oportunidades de colaboraci\u00f3n</p> <p> Conectar en LinkedIn</p> </li> </ul>"},{"location":"#licencia","title":"\ud83d\udcc4 Licencia","text":"<p>Este proyecto est\u00e1 licenciado bajo Business Source License 1.1. Ver LICENSE para m\u00e1s detalles.</p> <ul> <li> <p> Homepage</p> <p>http://keiko-dapp.xyz/</p> </li> <li> <p> Documentaci\u00f3n</p> <p>docs/</p> </li> <li> <p> Especificaciones</p> <p>.kiro/specs/</p> </li> <li> <p> Enlaces \u00datiles</p> <ul> <li>Starknet</li> <li>Cairo</li> <li>xAPI</li> </ul> </li> </ul> <p>\u00daltima actualizaci\u00f3n: 23 de septiembre de 2025</p>"},{"location":"architecture/overview/","title":"\ud83c\udfd7\ufe0f Arquitectura de Keiko Latam","text":"<p>Esta secci\u00f3n explica la arquitectura h\u00edbrida de Keiko Latam, una plataforma de colaboraci\u00f3n educativa descentralizada que combina blockchain con aplicaciones tradicionales.</p>"},{"location":"architecture/overview/#vision-general","title":"\ud83c\udfaf Visi\u00f3n General","text":"<p>Keiko utiliza una arquitectura h\u00edbrida de 5 capas que combina las ventajas de blockchain (inmutabilidad, consenso, descentralizaci\u00f3n) con la simplicidad de una aplicaci\u00f3n monol\u00edtica modular (desarrollo m\u00e1s r\u00e1pido, debugging m\u00e1s f\u00e1cil).</p> <pre><code>graph TB\n    subgraph \"\ud83c\udf10 Frontend Layer\"\n        A[Flutter App&lt;br/&gt;Web/Mobile&lt;br/&gt;GraphQL Client]\n    end\n\n    subgraph \"\ud83d\udd0c API Layer\"\n        B[API Gateway&lt;br/&gt;GraphQL + REST&lt;br/&gt;Redis Streams]\n    end\n\n    subgraph \"\u2699\ufe0f Backend Layer\"\n        C[Backend Monol\u00edtico&lt;br/&gt;Rust + PostgreSQL&lt;br/&gt;Redis Streams]\n    end\n\n    subgraph \"\ud83c\udf09 gRPC Gateway Layer\"\n        D[Traductor Rust \u2194 Cairo&lt;br/&gt;Starknet RPC Client]\n    end\n\n    subgraph \"\u26d3\ufe0f Appchain Layer\"\n        E[Keikochain&lt;br/&gt;Cairo Smart Contracts&lt;br/&gt;Starknet Appchain]\n    end\n\n    A --&gt;|GraphQL&lt;br/&gt;HTTPS/WSS| B\n    B --&gt;|HTTP/REST&lt;br/&gt;Orquestaci\u00f3n| C\n    C --&gt;|gRPC&lt;br/&gt;Llamadas directas| D\n    D --&gt;|Starknet RPC&lt;br/&gt;Transacciones| E\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#e8f5e8\n    style D fill:#fff3e0\n    style E fill:#fce4ec</code></pre>"},{"location":"architecture/overview/#principios-de-diseno","title":"\ud83c\udfdb\ufe0f Principios de Dise\u00f1o","text":""},{"location":"architecture/overview/#1-hibrido-por-diseno","title":"1. H\u00edbrido por Dise\u00f1o","text":"<ul> <li>Blockchain para datos cr\u00edticos (interacciones de aprendizaje, proof-of-humanity)</li> <li>Aplicaci\u00f3n tradicional para funcionalidades complejas (UI, l\u00f3gica de negocio, cache)</li> </ul>"},{"location":"architecture/overview/#2-modular-pero-monolitico","title":"2. Modular pero Monol\u00edtico","text":"<ul> <li>M\u00f3dulos independientes por dominio de negocio</li> <li>Aplicaci\u00f3n monol\u00edtica para simplicidad de desarrollo</li> <li>Preparado para microservicios cuando sea necesario</li> </ul>"},{"location":"architecture/overview/#3-event-driven-architecture","title":"3. Event-Driven Architecture","text":"<ul> <li>Redis Streams para eventos entre m\u00f3dulos</li> <li>GraphQL Subscriptions para tiempo real</li> <li>Desacoplamiento entre componentes</li> </ul>"},{"location":"architecture/overview/#4-proof-of-humanity","title":"4. Proof-of-Humanity","text":"<ul> <li>Verificaci\u00f3n criptogr\u00e1fica de humanidad</li> <li>Privacidad preservada con zkProofs</li> <li>Recuperaci\u00f3n de identidad sin p\u00e9rdida de historial</li> </ul>"},{"location":"architecture/overview/#frontend-layer","title":"\ud83c\udf10 Frontend Layer","text":""},{"location":"architecture/overview/#flutter-multiplataforma","title":"Flutter Multiplataforma","text":"<pre><code>// Ejemplo de uso de GraphQL desde Flutter\nfinal result = await client.query(\n  QueryOptions(document: gql('''\n    query GetUserPassport($userId: ID!) {\n      user(id: $userId) {\n        passport {\n          interactions { id, timestamp, content }\n          reputation { current, historical }\n        }\n      }\n    }\n  '''))\n);\n</code></pre> <p>Caracter\u00edsticas: - \u2705 Multiplataforma: Web, iOS, Android - \u2705 GraphQL nativo: Cliente GraphQL integrado - \u2705 Tiempo real: Subscriptions WebSocket - \u2705 Offline-first: Cache local con sincronizaci\u00f3n - \u2705 UI nativa: Componentes optimizados por plataforma</p>"},{"location":"architecture/overview/#api-layer","title":"\ud83d\udd0c API Layer","text":""},{"location":"architecture/overview/#graphql-rest-gateway","title":"GraphQL + REST Gateway","text":"<pre><code>// API Gateway orquesta llamadas HTTP al backend\nasync fn get_user_passport(ctx: &amp;Context, user_id: String) -&gt; Result&lt;Passport&gt; {\n    let (passport_data, reputation_data) = tokio::join!(\n        ctx.http_client.get(&amp;format!(\"/api/passport/{}\", user_id)),\n        ctx.http_client.get(&amp;format!(\"/api/reputation/{}\", user_id))\n    );\n\n    Ok(Passport {\n        data: passport_data?.json().await?,\n        reputation: reputation_data?.json().await?,\n    })\n}\n</code></pre> <p>Caracter\u00edsticas: - \u2705 GraphQL unificado: API \u00fanica para frontend - \u2705 REST endpoints: Para integraci\u00f3n con LRS externos - \u2705 WebSocket Secure: GraphQL subscriptions - \u2705 Orquestaci\u00f3n: Agrega datos de m\u00faltiples m\u00f3dulos - \u2705 Cache inteligente: Invalida seg\u00fan eventos Redis</p>"},{"location":"architecture/overview/#backend-layer","title":"\u2699\ufe0f Backend Layer","text":""},{"location":"architecture/overview/#aplicacion-monolitica-modular","title":"Aplicaci\u00f3n Monol\u00edtica Modular","text":"<pre><code>backend/modules/\n\u251c\u2500\u2500 identity/           # Autenticaci\u00f3n, usuarios, Proof-of-Humanity\n\u251c\u2500\u2500 learning/           # xAPI statements, interacciones at\u00f3micas\n\u251c\u2500\u2500 reputation/         # Sistema de calificaciones y reputaci\u00f3n\n\u251c\u2500\u2500 passport/           # Agregaci\u00f3n de pasaportes de aprendizaje\n\u251c\u2500\u2500 governance/         # Gobernanza comunitaria y est\u00e1ndares\n\u251c\u2500\u2500 marketplace/        # Tutores, espacios, transacciones\n\u2514\u2500\u2500 selfstudy_guides/  # Gu\u00edas de auto-estudio adaptativas\n</code></pre> <p>Ventajas del Monolito Modular: - \ud83d\ude80 Desarrollo r\u00e1pido: Una sola aplicaci\u00f3n - \ud83d\udd27 Debugging f\u00e1cil: Stack traces completos - \ud83d\udce6 Deploy simple: Un solo binario - \ud83d\udcb0 Recursos limitados: Una base de datos - \ud83d\udd04 Comunicaci\u00f3n directa: Llamadas de funci\u00f3n</p>"},{"location":"architecture/overview/#grpc-gateway-layer","title":"\ud83c\udf09 gRPC Gateway Layer","text":""},{"location":"architecture/overview/#traductor-rust-cairo","title":"Traductor Rust \u2194 Cairo","text":"<pre><code>// gRPC Gateway traduce llamadas Rust a transacciones Cairo\nimpl LearningService for GrpcGateway {\n    async fn create_interaction(&amp;self, interaction: Interaction) -&gt; Result&lt;String&gt; {\n        // 1. Traducir tipos Rust \u2192 Cairo\n        let cairo_data = self.translator.rust_to_cairo(interaction)?;\n\n        // 2. Preparar calldata para Cairo contract\n        let calldata = self.prepare_calldata(cairo_data)?;\n\n        // 3. Enviar transacci\u00f3n a Keikochain\n        let tx_hash = self.starknet_client\n            .invoke_contract(\n                self.learning_contract_address,\n                \"create_interaction\",\n                calldata\n            )\n            .await?;\n\n        Ok(tx_hash)\n    }\n}\n</code></pre> <p>Caracter\u00edsticas: - \u2705 Traducci\u00f3n autom\u00e1tica: Tipos Rust \u2194 Cairo - \u2705 Batching: Agrupa transacciones para eficiencia - \u2705 Retry logic: Manejo de errores transitorios - \u2705 Circuit breakers: Protecci\u00f3n contra fallos</p>"},{"location":"architecture/overview/#appchain-layer","title":"\u26d3\ufe0f Appchain Layer","text":""},{"location":"architecture/overview/#keikochain-starknet-appchain","title":"Keikochain (Starknet Appchain)","text":"<pre><code>// Contrato Cairo para interacciones de aprendizaje\n#[contract]\nmod learning_interactions {\n    use starknet::ContractAddress;\n    use starknet::get_caller_address;\n\n    #[storage]\n    struct Storage {\n        interactions: Map&lt;(felt252, felt252), Interaction&gt;,\n        humanity_proofs: Map&lt;felt252, felt252&gt;,\n    }\n\n    #[external(v0)]\n    fn create_interaction(\n        ref self: ContractState,\n        interaction: Interaction,\n        humanity_signature: felt252\n    ) -&gt; bool {\n        // Verificar proof-of-humanity\n        let caller = get_caller_address();\n        assert(self.humanity_proofs.read(caller) == humanity_signature);\n\n        // Almacenar interacci\u00f3n\n        self.interactions.write(caller, interaction.timestamp, interaction);\n\n        true\n    }\n}\n</code></pre> <p>Caracter\u00edsticas: - \u2705 Cairo nativo: Optimizado para Starknet - \u2705 Pruebas STARK: Verificaci\u00f3n de humanidad - \u2705 Inmutabilidad: Datos verificables - \u2705 Escalabilidad: L2 de Ethereum</p>"},{"location":"architecture/overview/#flujos-de-datos","title":"\ud83d\udcca Flujos de Datos","text":""},{"location":"architecture/overview/#1-escritura-de-datos-criticos","title":"1. Escritura de Datos Cr\u00edticos","text":"<pre><code>sequenceDiagram\n    participant F as Flutter\n    participant A as API Gateway\n    participant B as Backend\n    participant G as gRPC Gateway\n    participant K as Keikochain\n\n    F-&gt;&gt;A: GraphQL Mutation\n    A-&gt;&gt;B: HTTP/REST\n    B-&gt;&gt;G: gRPC Call\n    G-&gt;&gt;K: Starknet Transaction\n    K--&gt;&gt;G: Transaction Hash\n    G--&gt;&gt;B: Success\n    B-&gt;&gt;B: Update Cache\n    B-&gt;&gt;A: Redis Event\n    A-&gt;&gt;F: GraphQL Subscription</code></pre>"},{"location":"architecture/overview/#2-lectura-de-datos","title":"2. Lectura de Datos","text":"<pre><code>sequenceDiagram\n    participant F as Flutter\n    participant A as API Gateway\n    participant B as Backend\n    participant C as Cache\n\n    F-&gt;&gt;A: GraphQL Query\n    A-&gt;&gt;B: HTTP/REST\n    B-&gt;&gt;C: Check Cache\n    alt Cache Hit\n        C--&gt;&gt;B: Cached Data\n    else Cache Miss\n        B-&gt;&gt;G: gRPC Call (fallback)\n        G-&gt;&gt;K: Read Contract\n        K--&gt;&gt;G: Data\n        G--&gt;&gt;B: Data\n        B-&gt;&gt;C: Update Cache\n    end\n    B--&gt;&gt;A: Data\n    A--&gt;&gt;F: GraphQL Response</code></pre>"},{"location":"architecture/overview/#3-tiempo-real","title":"3. Tiempo Real","text":"<pre><code>sequenceDiagram\n    participant K as Keikochain\n    participant G as gRPC Gateway\n    participant B as Backend\n    participant R as Redis Streams\n    participant A as API Gateway\n    participant F as Flutter\n\n    K-&gt;&gt;G: Contract Event\n    G-&gt;&gt;B: gRPC Notification\n    B-&gt;&gt;R: Publish Event\n    R-&gt;&gt;A: Stream Event\n    A-&gt;&gt;F: GraphQL Subscription</code></pre>"},{"location":"architecture/overview/#seguridad-y-privacidad","title":"\ud83d\udd10 Seguridad y Privacidad","text":""},{"location":"architecture/overview/#proof-of-humanity-con-zkproofs","title":"Proof-of-Humanity con zkProofs","text":"<pre><code>graph LR\n    A[Usuario] --&gt;|Datos Biom\u00e9tricos| B[Procesamiento Off-chain]\n    B --&gt;|iris_hash + genome_hash + salt| C[humanity_proof_key]\n    C --&gt;|SHA-256| D[Composite Key]\n    D --&gt;|Prueba STARK| E[Verificaci\u00f3n en Blockchain]\n    E --&gt;|Firma Ed25519| F[Interacciones Firmadas]\n\n    style A fill:#e3f2fd\n    style B fill:#fff3e0\n    style C fill:#e8f5e8\n    style D fill:#fce4ec\n    style E fill:#f3e5f5\n    style F fill:#e1f5fe</code></pre> <p>Caracter\u00edsticas de Seguridad: - \ud83d\udd12 Datos biom\u00e9tricos off-chain: Nunca se almacenan en blockchain - \ud83d\udd11 humanity_proof_key \u00fanica: Derivada de iris + genoma + salt - \u2705 Pruebas STARK: Verificaci\u00f3n sin exponer datos - \ud83d\udd04 Recuperaci\u00f3n de identidad: Sin p\u00e9rdida de historial - \ud83d\udee1\ufe0f Anti-Sybil: Previene m\u00faltiples identidades</p>"},{"location":"architecture/overview/#escalabilidad","title":"\ud83d\udcc8 Escalabilidad","text":""},{"location":"architecture/overview/#estrategia-de-escalado","title":"Estrategia de Escalado","text":"Componente Escalado Estrategia Frontend Horizontal CDN + Edge caching API Gateway Horizontal Load balancer + replicas Backend Vertical \u2192 Horizontal Monolito \u2192 Microservicios gRPC Gateway Horizontal M\u00faltiples instancias Keikochain L2 Starknet Appchain"},{"location":"architecture/overview/#migracion-futura","title":"Migraci\u00f3n Futura","text":"<pre><code>graph TD\n    A[Monolito Modular] --&gt;|Crecimiento| B[Identificar Hotspots]\n    B --&gt;|Extracci\u00f3n| C[Microservicios Selectivos]\n    C --&gt;|Optimizaci\u00f3n| D[Arquitectura Distribuida]\n\n    style A fill:#e8f5e8\n    style B fill:#fff3e0\n    style C fill:#e3f2fd\n    style D fill:#f3e5f5</code></pre>"},{"location":"architecture/overview/#herramientas-y-tecnologias","title":"\ud83d\udd27 Herramientas y Tecnolog\u00edas","text":""},{"location":"architecture/overview/#stack-tecnologico","title":"Stack Tecnol\u00f3gico","text":"Capa Tecnolog\u00edas Prop\u00f3sito Frontend Flutter, Dart, GraphQL UI multiplataforma API Rust, Axum, GraphQL, WebSocket Gateway unificado Backend Rust, PostgreSQL, Redis L\u00f3gica de negocio Gateway Rust, gRPC, Starknet RPC Traducci\u00f3n Rust\u2194Cairo Blockchain Cairo, Starknet, STARKs Datos inmutables"},{"location":"architecture/overview/#herramientas-de-desarrollo","title":"Herramientas de Desarrollo","text":"<ul> <li>\ud83d\udc33 Podman: Containerizaci\u00f3n (Docker tambi\u00e9n soportado)</li> <li>\u2638\ufe0f Kubernetes: Orquestaci\u00f3n</li> <li>\ud83d\udd04 GitFlow: Flujo de trabajo</li> <li>\ud83d\ude80 GitHub Actions: CI/CD</li> <li>\ud83d\udcca Prometheus: Monitoreo</li> <li>\ud83d\udcc8 Grafana: Dashboards</li> </ul>"},{"location":"architecture/overview/#beneficios-de-la-arquitectura","title":"\ud83c\udfaf Beneficios de la Arquitectura","text":""},{"location":"architecture/overview/#ventajas","title":"\u2705 Ventajas","text":"<ol> <li>\ud83d\ude80 Desarrollo R\u00e1pido: Monolito modular acelera desarrollo</li> <li>\ud83d\udd12 Seguridad Blockchain: Datos cr\u00edticos inmutables</li> <li>\u26a1 Performance: Cache local + blockchain cuando necesario</li> <li>\ud83d\udd27 Debugging F\u00e1cil: Stack traces completos</li> <li>\ud83d\udcb0 Costo-Efectivo: Una base de datos, recursos compartidos</li> <li>\ud83d\udd04 Flexibilidad: Preparado para microservicios</li> <li>\ud83c\udf10 Interoperabilidad: Est\u00e1ndares abiertos (xAPI, GraphQL)</li> </ol>"},{"location":"architecture/overview/#consideraciones","title":"\u26a0\ufe0f Consideraciones","text":"<ol> <li>\ud83d\udcca Monitoreo Complejo: M\u00faltiples capas a observar</li> <li>\ud83d\udd27 Debugging Distribuido: Logs en m\u00faltiples sistemas</li> <li>\ud83d\udcc8 Escalado Gradual: Migraci\u00f3n planificada a microservicios</li> <li>\ud83c\udf93 Curva de Aprendizaje: M\u00faltiples tecnolog\u00edas</li> </ol>"},{"location":"architecture/overview/#proximos-pasos","title":"\ud83d\ude80 Pr\u00f3ximos Pasos","text":"<ol> <li>\ud83d\udcd6 Capas detalladas: Layers del sistema</li> <li>\ud83d\udcca Flujo de datos: Data flow</li> <li>\u26d3\ufe0f Keikochain: Appchain details</li> <li>\ud83d\udd27 Desarrollo: Configuraci\u00f3n local</li> </ol> <p>\u00daltima actualizaci\u00f3n: 23 de septiembre de 2025</p>"},{"location":"development/cairo-macros-cheatsheet/","title":"Cairo Macros Cheat Sheet para Starknet","text":""},{"location":"development/cairo-macros-cheatsheet/#macros-principales","title":"\ud83d\udccb Macros Principales","text":""},{"location":"development/cairo-macros-cheatsheet/#contrato-y-modulos","title":"Contrato y M\u00f3dulos","text":"<p>Macros principales: - <code>#[contract]</code> - Define un m\u00f3dulo como contrato inteligente - <code>#[starknet::interface]</code> - Define una interfaz de contrato - <code>#[abi]</code> - Genera autom\u00e1ticamente el ABI del contrato</p> <p>Ejemplo de uso: <pre><code>#[starknet::interface]\ntrait ITokenContract&lt;TContractState&gt; {\n    fn transfer(ref self: TContractState, to: felt252, amount: u256);\n    fn get_balance(self: @TContractState, account: felt252) -&gt; u256;\n}\n\n#[contract]\nmod TokenContract {\n    use super::ITokenContract;\n\n    #[storage]\n    struct Storage {\n        owner: felt252,\n        total_supply: u256,\n        balances: Map&lt;felt252, u256&gt;,\n    }\n\n    #[abi]\n    impl TokenContractImpl of ITokenContract&lt;ContractState&gt; {\n        fn transfer(ref self: ContractState, to: felt252, amount: u256) {\n            let caller = get_caller_address();\n            let balance = self.balances.read(caller);\n            assert(balance &gt;= amount, 'Insufficient balance');\n            self.balances.write(caller, balance - amount);\n            self.balances.write(to, self.balances.read(to) + amount);\n        }\n\n        fn get_balance(self: @ContractState, account: felt252) -&gt; u256 {\n            self.balances.read(account)\n        }\n    }\n\n    #[constructor]\n    fn constructor(ref self: ContractState, initial_owner: felt252, initial_supply: u256) {\n        self.owner.write(initial_owner);\n        self.total_supply.write(initial_supply);\n        self.balances.write(initial_owner, initial_supply);\n    }\n}\n</code></pre></p> <p>\ud83d\udca1 Para principiantes: Un contrato en Cairo es como una clase en programaci\u00f3n orientada a objetos, pero vive en la blockchain.  - <code>#[starknet::interface]</code> define el \"contrato\" o especificaci\u00f3n de qu\u00e9 funciones p\u00fablicas tendr\u00e1 tu contrato - <code>#[contract]</code> le dice al compilador que este m\u00f3dulo debe ser tratado como un contrato inteligente desplegable - <code>#[abi]</code> genera autom\u00e1ticamente el ABI (Application Binary Interface) que permite que otros contratos y aplicaciones interact\u00faen con el tuyo</p>"},{"location":"development/cairo-macros-cheatsheet/#almacenamiento","title":"Almacenamiento","text":"<p>Macros de almacenamiento: - <code>#[storage]</code> - Define la estructura de almacenamiento - <code>#[substorage(v0)]</code> - Define sub-almacenamiento (versi\u00f3n 0)</p> <p>Ejemplo: <pre><code>#[storage]\nstruct Storage {\n    owner: felt252,\n    balances: Map&lt;felt252, u256&gt;,\n    total_supply: u256,\n}\n</code></pre></p> <p>\ud83d\udca1 Para principiantes: El almacenamiento es donde tu contrato guarda datos permanentemente en la blockchain. <code>felt252</code> es el tipo b\u00e1sico de Cairo (como un string o n\u00famero), <code>Map</code> es como un diccionario que asocia claves con valores, y <code>u256</code> es un n\u00famero entero de 256 bits. Todo lo que declares aqu\u00ed persiste entre transacciones.</p>"},{"location":"development/cairo-macros-cheatsheet/#funciones-del-contrato","title":"Funciones del Contrato","text":"<p>Macros de funciones: - <code>#[external]</code> - Funci\u00f3n p\u00fablica que puede modificar estado - <code>#[view]</code> - Funci\u00f3n p\u00fablica de solo lectura - <code>#[constructor]</code> - Funci\u00f3n que se ejecuta al desplegar - <code>#[l1_handler]</code> - Funci\u00f3n que maneja mensajes L1\u2192L2</p> <p>Ejemplo: <pre><code>#[constructor]\nfn constructor(initial_owner: felt252) {\n    owner::write(initial_owner);\n}\n\n#[external]\nfn transfer(to: felt252, amount: u256) {\n    // L\u00f3gica de transferencia\n}\n\n#[view]\nfn get_balance(account: felt252) -&gt; u256 {\n    balances::read(account)\n}\n</code></pre></p> <p>\ud83d\udca1 Para principiantes:  - <code>#[constructor]</code> se ejecuta UNA SOLA VEZ cuando despliegas el contrato (como inicializar variables) - <code>#[external]</code> son funciones que cualquiera puede llamar y que pueden cambiar el estado del contrato (como transferir tokens) - <code>#[view]</code> son funciones de solo lectura que no cuestan gas y no cambian nada (como consultar un balance) - <code>#[l1_handler]</code> maneja mensajes que vienen de Ethereum (L1) hacia Starknet (L2)</p>"},{"location":"development/cairo-macros-cheatsheet/#eventos","title":"Eventos","text":"<p>Macros de eventos: - <code>#[event]</code> - Define un evento del contrato - <code>#[derive(Drop, Serde)]</code> - Genera implementaciones autom\u00e1ticas</p> <p>Ejemplo: <pre><code>#[event]\n#[derive(Drop, Serde)]\nstruct Transfer {\n    from: felt252,\n    to: felt252,\n    amount: u256,\n}\n\n// Emitir evento\nTransfer { from, to, amount }.emit();\n</code></pre></p> <p>\ud83d\udca1 Para principiantes: Los eventos son como \"notificaciones\" que tu contrato env\u00eda cuando algo importante sucede. Son \u00fatiles para que las aplicaciones frontend sepan cu\u00e1ndo actualizar la interfaz. Por ejemplo, cuando alguien transfiere tokens, emites un evento <code>Transfer</code> para que las wallets y exploradores puedan mostrar la transacci\u00f3n.</p>"},{"location":"development/cairo-macros-cheatsheet/#serializacion-y-deserializacion","title":"Serializaci\u00f3n y Deserializaci\u00f3n","text":"<p>Macros derive: - <code>#[derive(Serde)]</code> - Genera serializaci\u00f3n/deserializaci\u00f3n - <code>#[derive(Drop)]</code> - Genera implementaci\u00f3n de Drop - <code>#[derive(Copy)]</code> - Genera implementaci\u00f3n de Copy - <code>#[derive(PartialEq)]</code> - Genera comparaci\u00f3n de igualdad</p> <p>Ejemplo: <pre><code>#[derive(Serde, Drop, Copy, PartialEq)]\nstruct UserData {\n    name: felt252,\n    age: u8,\n    is_active: bool,\n}\n</code></pre></p> <p>\ud83d\udca1 Para principiantes: Los macros <code>derive</code> generan c\u00f3digo autom\u00e1ticamente para ti: - <code>Serde</code> permite convertir tu estructura a/desde bytes (necesario para guardar en storage) - <code>Drop</code> permite que la estructura se \"destruya\" autom\u00e1ticamente cuando no se necesite - <code>Copy</code> permite copiar la estructura f\u00e1cilmente - <code>PartialEq</code> permite comparar si dos estructuras son iguales con <code>==</code></p>"},{"location":"development/cairo-macros-cheatsheet/#configuracion-de-compilacion","title":"Configuraci\u00f3n de Compilaci\u00f3n","text":"<p>Macros de configuraci\u00f3n: - <code>#[cfg(target_os = \"starknet\")]</code> - Solo compilar para Starknet - <code>#[cfg(test)]</code> - Solo en tests - <code>#[cfg(feature = \"std\")]</code> - Solo con feature std</p> <p>\ud83d\udca1 Para principiantes: Estos macros controlan cu\u00e1ndo se incluye c\u00f3digo en la compilaci\u00f3n final. Por ejemplo, <code>#[cfg(test)]</code> significa que ese c\u00f3digo solo se compila cuando ejecutas tests, no en el contrato final. Es \u00fatil para tener c\u00f3digo de prueba separado del c\u00f3digo de producci\u00f3n.</p>"},{"location":"development/cairo-macros-cheatsheet/#macros-para-testing","title":"\ud83d\udd27 Macros para Testing","text":"<p>Macros de testing: - <code>#[test]</code> - Marca una funci\u00f3n como test - <code>#[available_gas(20000000)]</code> - Limita gas para tests</p> <p>Ejemplo: <pre><code>#[test]\n#[available_gas(20000000)]\nfn test_transfer() {\n    // C\u00f3digo de test\n}\n</code></pre></p> <p>\ud83d\udca1 Para principiantes: Los tests son fundamentales en desarrollo de contratos inteligentes. <code>#[test]</code> marca una funci\u00f3n como test, y <code>#[available_gas(20000000)]</code> le da a tu test un l\u00edmite de gas espec\u00edfico para simular condiciones reales. Siempre prueba tus contratos antes de desplegarlos en mainnet.</p>"},{"location":"development/cairo-macros-cheatsheet/#macros-de-seguridad","title":"\ud83d\udee1\ufe0f Macros de Seguridad","text":"<p>Macros de optimizaci\u00f3n: - <code>#[inline(always)]</code> - Fuerza inline de funci\u00f3n - <code>#[inline(never)]</code> - Evita inline de funci\u00f3n - <code>#[cold]</code> - Marca funci\u00f3n como \"fr\u00eda\" (poco usada)</p> <p>\ud83d\udca1 Para principiantes: Estos macros optimizan el rendimiento de tu contrato. <code>inline</code> significa que el compilador copia el c\u00f3digo de la funci\u00f3n directamente donde se llama, en lugar de hacer una llamada separada. Esto puede hacer el c\u00f3digo m\u00e1s r\u00e1pido pero m\u00e1s grande. \u00dasalos solo cuando tengas problemas de rendimiento espec\u00edficos.</p>"},{"location":"development/cairo-macros-cheatsheet/#macros-de-importacion","title":"\ud83d\udce6 Macros de Importaci\u00f3n","text":"<p>Importaciones comunes: - <code>use starknet::ContractAddress</code> - Para direcciones de contrato - <code>use starknet::get_caller_address</code> - Para obtener la direcci\u00f3n del llamador - <code>use starknet::get_contract_address</code> - Para obtener la direcci\u00f3n del contrato - <code>use starknet::storage::{Map, LegacyMap, Vec, VecMapped}</code> - Para estructuras de almacenamiento</p> <p>\ud83d\udca1 Para principiantes: Las importaciones te dan acceso a funcionalidades pre-construidas. <code>get_caller_address()</code> es muy importante para seguridad - te dice qui\u00e9n est\u00e1 llamando tu funci\u00f3n. <code>Map</code> es como un diccionario para guardar datos asociados, y <code>Vec</code> es como una lista din\u00e1mica.</p>"},{"location":"development/cairo-macros-cheatsheet/#patrones-comunes","title":"\ud83d\ude80 Patrones Comunes","text":""},{"location":"development/cairo-macros-cheatsheet/#constructor-con-validacion","title":"Constructor con Validaci\u00f3n","text":"<pre><code>#[constructor]\nfn constructor(initial_owner: felt252) {\n    assert(initial_owner != 0, 'Invalid owner');\n    owner::write(initial_owner);\n}\n</code></pre> <p>\ud83d\udca1 Para principiantes: Siempre valida los par\u00e1metros en el constructor. <code>assert()</code> detiene la ejecuci\u00f3n si la condici\u00f3n es falsa. Aqu\u00ed verificamos que el owner no sea 0 (direcci\u00f3n inv\u00e1lida) antes de guardarlo. Es mejor fallar al desplegar que tener un contrato con datos incorrectos.</p>"},{"location":"development/cairo-macros-cheatsheet/#funcion-con-verificacion-de-propietario","title":"Funci\u00f3n con Verificaci\u00f3n de Propietario","text":"<pre><code>#[external]\nfn admin_function() {\n    let caller = get_caller_address();\n    assert(caller == owner::read(), 'Not owner');\n\n    // L\u00f3gica administrativa\n}\n</code></pre> <p>\ud83d\udca1 Para principiantes: Este es un patr\u00f3n de seguridad fundamental. Siempre verifica qui\u00e9n est\u00e1 llamando tu funci\u00f3n antes de permitir acciones administrativas. <code>get_caller_address()</code> te da la direcci\u00f3n de quien hizo la transacci\u00f3n, y lo comparas con el owner guardado en storage. Sin esto, cualquiera podr\u00eda ejecutar funciones administrativas.</p>"},{"location":"development/cairo-macros-cheatsheet/#funcion-con-verificacion-de-permisos","title":"Funci\u00f3n con Verificaci\u00f3n de Permisos","text":"<pre><code>#[external]\nfn restricted_function() {\n    let caller = get_caller_address();\n    assert(is_authorized(caller), 'Not authorized');\n\n    // L\u00f3gica restringida\n}\n</code></pre> <p>\ud83d\udca1 Para principiantes: Este patr\u00f3n es m\u00e1s flexible que verificar solo el owner. <code>is_authorized()</code> puede ser una funci\u00f3n que verifica si el caller tiene permisos espec\u00edficos (como ser un moderador, tener un rol especial, etc.). Te permite tener m\u00faltiples niveles de acceso en tu contrato.</p>"},{"location":"development/cairo-macros-cheatsheet/#funcion-con-manejo-de-errores","title":"Funci\u00f3n con Manejo de Errores","text":"<pre><code>#[external]\nfn safe_function(value: u256) {\n    assert(value &gt; 0, 'Value must be positive');\n    assert(value &lt; MAX_VALUE, 'Value too large');\n\n    // L\u00f3gica segura\n}\n</code></pre> <p>\ud83d\udca1 Para principiantes: Siempre valida los inputs de tus funciones. Los usuarios pueden enviar cualquier valor, y sin validaci\u00f3n tu contrato puede comportarse de manera inesperada. Aqu\u00ed verificamos que el valor est\u00e9 en un rango v\u00e1lido antes de procesarlo. Los mensajes de error deben ser claros para ayudar con el debugging.</p>"},{"location":"development/cairo-macros-cheatsheet/#macros-de-utilidades","title":"\ud83d\udcda Macros de Utilidades","text":""},{"location":"development/cairo-macros-cheatsheet/#estructuras-de-datos-comunes","title":"Estructuras de Datos Comunes","text":"<pre><code>#[derive(Serde, Drop, Copy, PartialEq)]\nstruct User {\n    id: u256,\n    name: felt252,\n    balance: u256,\n    is_active: bool,\n}\n\n#[derive(Serde, Drop, Copy, PartialEq)]\nstruct Transaction {\n    id: u256,\n    from: felt252,\n    to: felt252,\n    amount: u256,\n    timestamp: u64,\n}\n</code></pre> <p>\ud83d\udca1 Para principiantes: Las estructuras te permiten agrupar datos relacionados. <code>User</code> podr\u00eda representar un usuario en tu sistema con su ID, nombre, balance y estado. <code>Transaction</code> representa una transacci\u00f3n con todos sus detalles. Usa <code>u256</code> para IDs y cantidades grandes, <code>felt252</code> para direcciones y texto, y <code>bool</code> para estados simples.</p>"},{"location":"development/cairo-macros-cheatsheet/#funciones-de-validacion","title":"Funciones de Validaci\u00f3n","text":"<pre><code>// Macros para manejo de errores\n#[inline(always)]\nfn assert_positive(value: u256) {\n    assert(value &gt; 0, 'Value must be positive');\n}\n\n#[inline(always)]\nfn assert_authorized(caller: felt252) {\n    assert(is_authorized(caller), 'Not authorized');\n}\n\n#[inline(always)]\nfn assert_sufficient_balance(account: felt252, amount: u256) {\n    let balance = balances::read(account);\n    assert(balance &gt;= amount, 'Insufficient balance');\n}\n</code></pre> <p>\ud83d\udca1 Para principiantes: Crear funciones de validaci\u00f3n reutilizables es una excelente pr\u00e1ctica. En lugar de repetir la misma l\u00f3gica de validaci\u00f3n en m\u00faltiples lugares, creas una funci\u00f3n que puedes llamar. <code>#[inline(always)]</code> hace que estas funciones peque\u00f1as sean m\u00e1s eficientes. Esto hace tu c\u00f3digo m\u00e1s limpio y f\u00e1cil de mantener.</p>"},{"location":"development/cairo-macros-cheatsheet/#patrones-de-estado","title":"\ud83d\udd04 Patrones de Estado","text":""},{"location":"development/cairo-macros-cheatsheet/#maquina-de-estados","title":"M\u00e1quina de Estados","text":"<pre><code>#[derive(Serde, Drop, Copy, PartialEq)]\nenum ContractState {\n    Initialized,\n    Active,\n    Paused,\n    Terminated,\n}\n\n#[storage]\nstruct Storage {\n    state: ContractState,\n    // otros campos...\n}\n\n#[external]\nfn pause() {\n    assert(state::read() == ContractState::Active, 'Not active');\n    state::write(ContractState::Paused);\n}\n</code></pre> <p>\ud83d\udca1 Para principiantes: Una m\u00e1quina de estados controla en qu\u00e9 fase est\u00e1 tu contrato. Por ejemplo, un contrato puede estar <code>Active</code> (funcionando normalmente), <code>Paused</code> (temporalmente detenido), o <code>Terminated</code> (cerrado permanentemente). Esto es \u00fatil para pausar operaciones en caso de emergencia o para implementar l\u00f3gica de negocio espec\u00edfica.</p>"},{"location":"development/cairo-macros-cheatsheet/#contador-con-limites","title":"Contador con L\u00edmites","text":"<pre><code>#[storage]\nstruct Storage {\n    count: u256,\n    max_count: u256,\n}\n\n#[external]\nfn increment() {\n    let current = count::read();\n    let max = max_count::read();\n    assert(current &lt; max, 'Maximum count reached');\n    count::write(current + 1);\n}\n</code></pre> <p>\ud83d\udca1 Para principiantes: Este patr\u00f3n es \u00fatil para limitar operaciones. Por ejemplo, podr\u00edas limitar el n\u00famero de tokens que se pueden mintear, o el n\u00famero de votos que puede emitir una direcci\u00f3n. Siempre lee el valor actual, verifica que no exceda el l\u00edmite, y luego actualiza. Sin esta verificaci\u00f3n, el contador podr\u00eda desbordarse.</p>"},{"location":"development/cairo-macros-cheatsheet/#patrones-de-eventos","title":"\ud83c\udfaf Patrones de Eventos","text":""},{"location":"development/cairo-macros-cheatsheet/#eventos-con-indices","title":"Eventos con \u00cdndices","text":"<pre><code>#[event]\n#[derive(Drop, Serde)]\nstruct UserRegistered {\n    #[key]\n    user: felt252,\n    timestamp: u64,\n    user_type: UserType,\n}\n\n#[event]\n#[derive(Drop, Serde)]\nstruct BalanceUpdated {\n    #[key]\n    account: felt252,\n    old_balance: u256,\n    new_balance: u256,\n    timestamp: u64,\n}\n</code></pre> <p>\ud83d\udca1 Para principiantes: El atributo <code>#[key]</code> marca campos importantes para indexaci\u00f3n. Esto hace que sea m\u00e1s f\u00e1cil buscar eventos espec\u00edficos. Por ejemplo, con <code>#[key] user: felt252</code>, puedes buscar f\u00e1cilmente todos los eventos de registro para un usuario espec\u00edfico. Los \u00edndices mejoran el rendimiento de las consultas de eventos.</p>"},{"location":"development/cairo-macros-cheatsheet/#eventos-de-error","title":"Eventos de Error","text":"<pre><code>#[event]\n#[derive(Drop, Serde)]\nstruct ErrorOccurred {\n    error_code: u256,\n    error_message: felt252,\n    timestamp: u64,\n    caller: felt252,\n}\n</code></pre> <p>\ud83d\udca1 Para principiantes: Los eventos de error son \u00fatiles para debugging y monitoreo. Cuando algo sale mal en tu contrato, puedes emitir un evento con detalles del error, incluyendo qui\u00e9n lo caus\u00f3 y cu\u00e1ndo. Esto te ayuda a rastrear problemas y mejorar tu contrato. Es mejor emitir eventos de error que simplemente fallar silenciosamente.</p>"},{"location":"development/cairo-macros-cheatsheet/#referencias","title":"\ud83d\udcd6 Referencias","text":"<ul> <li>Cairo Book - Macros</li> <li>Starknet Book - Smart Contracts</li> <li>Cairo Reference</li> </ul> <p>\ud83d\udca1 Tip: Usa <code>#[cfg(test)]</code> para c\u00f3digo que solo debe compilar en tests y <code>#[inline(always)]</code> para funciones cr\u00edticas de rendimiento.</p>"},{"location":"development/cairo-macros-cheatsheet/#guia-para-principiantes","title":"\ud83c\udf93 Gu\u00eda para Principiantes","text":""},{"location":"development/cairo-macros-cheatsheet/#conceptos-basicos-de-cairo","title":"Conceptos B\u00e1sicos de Cairo","text":"<p>\u00bfQu\u00e9 es Cairo? Cairo es un lenguaje de programaci\u00f3n dise\u00f1ado espec\u00edficamente para crear pruebas de conocimiento cero (zero-knowledge proofs) y contratos inteligentes en Starknet. Es m\u00e1s seguro y eficiente que Solidity para ciertos tipos de aplicaciones.</p> <p>\u00bfQu\u00e9 es Starknet? Starknet es una red de capa 2 (L2) construida sobre Ethereum que usa tecnolog\u00eda de pruebas de conocimiento cero para hacer las transacciones m\u00e1s r\u00e1pidas y baratas, manteniendo la seguridad de Ethereum.</p> <p>Tipos de datos importantes: - <code>felt252</code>: El tipo b\u00e1sico de Cairo, puede representar n\u00fameros, direcciones, o texto - <code>u256</code>: N\u00fameros enteros de 256 bits (muy grandes) - <code>bool</code>: Verdadero o falso - <code>Map&lt;K, V&gt;</code>: Como un diccionario que asocia claves con valores</p> <p>Flujo de desarrollo t\u00edpico: 1. Escribe tu contrato en Cairo 2. Compila con <code>scarb build</code> 3. Prueba con <code>scarb test</code> 4. Despliega en Starknet testnet 5. Prueba en testnet 6. Despliega en mainnet</p> <p>Mejores pr\u00e1cticas de seguridad: - Siempre valida inputs de usuario - Verifica permisos antes de ejecutar funciones administrativas - Usa eventos para logging y debugging - Prueba exhaustivamente antes de desplegar - Considera usar auditor\u00edas para contratos importantes</p>"},{"location":"development/cairo-quick-reference/","title":"Cairo Quick Reference para Keiko","text":""},{"location":"development/cairo-quick-reference/#macros-esenciales","title":"\ud83d\ude80 Macros Esenciales","text":"Macro Prop\u00f3sito Ejemplo <code>#[contract]</code> Define contrato inteligente <code>#[contract] mod MyContract</code> <code>#[storage]</code> Estructura de almacenamiento <code>#[storage] struct Storage</code> <code>#[external]</code> Funci\u00f3n p\u00fablica (modifica estado) <code>#[external] fn transfer()</code> <code>#[view]</code> Funci\u00f3n de solo lectura <code>#[view] fn get_balance()</code> <code>#[constructor]</code> Funci\u00f3n de inicializaci\u00f3n <code>#[constructor] fn constructor()</code> <code>#[event]</code> Define evento <code>#[event] struct Transfer</code> <code>#[derive(Serde)]</code> Serializaci\u00f3n autom\u00e1tica <code>#[derive(Serde, Drop)]</code>"},{"location":"development/cairo-quick-reference/#imports-comunes","title":"\ud83d\udd27 Imports Comunes","text":"<pre><code>use starknet::{\n    ContractAddress, get_caller_address, get_contract_address,\n    get_block_timestamp, get_block_number\n};\nuse starknet::crypto::{sha256, verify_signature};\nuse starknet::storage::{Map, LegacyMap, Vec};\n</code></pre>"},{"location":"development/cairo-quick-reference/#estructura-basica-de-contrato","title":"\ud83d\udcdd Estructura B\u00e1sica de Contrato","text":"<pre><code>#[contract]\nmod MyContract {\n    use starknet::get_caller_address;\n\n    #[storage]\n    struct Storage {\n        owner: felt252,\n        data: Map&lt;felt252, felt252&gt;,\n    }\n\n    #[constructor]\n    fn constructor(initial_owner: felt252) {\n        owner::write(initial_owner);\n    }\n\n    #[external]\n    fn set_data(key: felt252, value: felt252) {\n        data::write(key, value);\n    }\n\n    #[view]\n    fn get_data(key: felt252) -&gt; felt252 {\n        data::read(key)\n    }\n}\n</code></pre>"},{"location":"development/cairo-quick-reference/#para-keiko-proof-of-humanity","title":"\ud83c\udfaf Para Keiko - Proof of Humanity","text":"<pre><code>#[contract]\nmod ProofOfHumanity {\n    #[storage]\n    struct Storage {\n        humanity_proof_keys: Map&lt;felt252, felt252&gt;,\n    }\n\n    #[external]\n    fn verify_humanity(proof: felt252, humanity_proof_key: felt252) {\n        // Verificar prueba STARK\n        let caller = get_caller_address();\n        humanity_proof_keys::write(caller, humanity_proof_key);\n    }\n}\n</code></pre>"},{"location":"development/cairo-quick-reference/#comandos-utiles","title":"\u26a1 Comandos \u00datiles","text":"<pre><code># Compilar contrato\nscarb build\n\n# Ejecutar tests\nscarb test\n\n# Declarar contrato\nstarknet declare --contract target/dev/MyContract.sierra.json\n\n# Desplegar contrato\nstarknet deploy --class-hash &lt;class_hash&gt;\n</code></pre>"},{"location":"development/cairo-quick-reference/#debugging","title":"\ud83d\udc1b Debugging","text":"<pre><code>// Usar assert para validaciones\nassert(condition, 'Error message');\n\n// Verificar caller\nlet caller = get_caller_address();\nassert(caller == expected_address, 'Unauthorized');\n</code></pre>"},{"location":"development/gitflow/","title":"\ud83d\udd04 GitFlow para Keiko Latam","text":"<p>Esta gu\u00eda explica c\u00f3mo usar GitFlow en el proyecto Keiko Latam para un flujo de trabajo de desarrollo organizado y eficiente.</p>"},{"location":"development/gitflow/#que-es-gitflow","title":"\ud83c\udfaf \u00bfQu\u00e9 es GitFlow?","text":"<p>GitFlow es un modelo de ramificaci\u00f3n que define un estricto modelo de ramas dise\u00f1ado alrededor del lanzamiento del proyecto. Proporciona un marco robusto para gestionar proyectos grandes con m\u00faltiples desarrolladores.</p>"},{"location":"development/gitflow/#estructura-de-ramas","title":"\ud83c\udf33 Estructura de Ramas","text":"<pre><code>gitGraph\n    commit id: \"Initial\"\n    branch develop\n    checkout develop\n    commit id: \"Feature A\"\n    commit id: \"Feature B\"\n    branch feature/new-feature\n    checkout feature/new-feature\n    commit id: \"Work on feature\"\n    checkout develop\n    merge feature/new-feature\n    commit id: \"Merge feature\"\n    branch release/v1.0.0\n    checkout release/v1.0.0\n    commit id: \"Bug fixes\"\n    commit id: \"Version bump\"\n    checkout main\n    merge release/v1.0.0\n    commit id: \"Release v1.0.0\"\n    checkout develop\n    merge release/v1.0.0\n    commit id: \"Sync develop\"\n    branch hotfix/critical-bug\n    checkout hotfix/critical-bug\n    commit id: \"Fix critical bug\"\n    checkout main\n    merge hotfix/critical-bug\n    commit id: \"Hotfix v1.0.1\"\n    checkout develop\n    merge hotfix/critical-bug\n    commit id: \"Sync hotfix\"</code></pre>"},{"location":"development/gitflow/#configuracion-inicial","title":"\ud83d\ude80 Configuraci\u00f3n Inicial","text":""},{"location":"development/gitflow/#1-instalar-gitflow","title":"1. Instalar GitFlow","text":"\ud83d\udc27 Ubuntu/Debian\ud83c\udf4e macOS\ud83d\udd27 Script Autom\u00e1tico <pre><code>sudo apt install -y git-flow\n</code></pre> <pre><code>brew install git-flow\n</code></pre> <pre><code># Usar el script de configuraci\u00f3n de Keiko\n./scripts/gitflow-setup.sh install\n</code></pre>"},{"location":"development/gitflow/#2-configurar-gitflow-en-el-repositorio","title":"2. Configurar GitFlow en el Repositorio","text":"<pre><code># Ejecutar desde la ra\u00edz del proyecto\n./scripts/gitflow-setup.sh configure\n</code></pre> <p>Esto configurar\u00e1: - \u2705 Rama <code>develop</code> desde <code>main</code> - \u2705 Configuraci\u00f3n de nombres de ramas personalizados - \u2705 Estructura GitFlow completa</p>"},{"location":"development/gitflow/#flujo-de-trabajo-por-tipo-de-branch","title":"\ud83d\udccb Flujo de Trabajo por Tipo de Branch","text":""},{"location":"development/gitflow/#feature-branches","title":"\ud83c\udf1f Feature Branches","text":"<p>Para desarrollar nuevas funcionalidades:</p> <pre><code># Iniciar nueva feature\ngit flow feature start nueva-funcionalidad\n\n# Trabajar en la feature\necho \"Nueva funcionalidad\" &gt;&gt; archivo.txt\ngit add .\ngit commit -m \"feat: agregar nueva funcionalidad\"\n\n# Finalizar feature (merge a develop)\ngit flow feature finish nueva-funcionalidad\n</code></pre> <p>Convenciones de naming: - <code>feature/auth-system</code> - <code>feature/marketplace-ui</code> - <code>feature/proof-of-humanity</code></p>"},{"location":"development/gitflow/#release-branches","title":"\ud83d\ude80 Release Branches","text":"<p>Para preparar releases:</p> <pre><code># Iniciar release\ngit flow release start 1.0.0\n\n# Hacer ajustes finales\necho \"v1.0.0\" &gt; VERSION\ngit add VERSION\ngit commit -m \"chore: bump version to 1.0.0\"\n\n# Finalizar release (merge a main y develop)\ngit flow release finish 1.0.0\n</code></pre> <p>Convenciones de naming: - <code>release/1.0.0</code> - <code>release/2.1.0</code> - <code>release/v1.2.3</code></p>"},{"location":"development/gitflow/#hotfix-branches","title":"\ud83d\udea8 Hotfix Branches","text":"<p>Para correcciones urgentes en producci\u00f3n:</p> <pre><code># Iniciar hotfix\ngit flow hotfix start 1.0.1\n\n# Corregir el problema\necho \"Fix critical bug\" &gt;&gt; archivo.txt\ngit add .\ngit commit -m \"fix: corregir bug cr\u00edtico en autenticaci\u00f3n\"\n\n# Finalizar hotfix (merge a main y develop)\ngit flow hotfix finish 1.0.1\n</code></pre> <p>Convenciones de naming: - <code>hotfix/critical-security-fix</code> - <code>hotfix/database-connection</code> - <code>hotfix/1.0.1</code></p>"},{"location":"development/gitflow/#mapeo-de-branches-a-entornos","title":"\ud83d\udd04 Mapeo de Branches a Entornos","text":"Branch Entorno Prop\u00f3sito <code>main</code> production C\u00f3digo estable en producci\u00f3n <code>develop</code> development Desarrollo activo <code>qa</code> qa Testing de calidad <code>staging</code> staging Preparaci\u00f3n para producci\u00f3n <code>release/*</code> staging Testing de release candidate <code>hotfix/*</code> production Correcciones urgentes"},{"location":"development/gitflow/#automatizacion-cicd","title":"\ud83e\udd16 Automatizaci\u00f3n CI/CD","text":""},{"location":"development/gitflow/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>El proyecto incluye un workflow automatizado que se ejecuta seg\u00fan el tipo de branch:</p> Feature BranchDevelop BranchRelease BranchMain Branch <pre><code># .github/workflows/gitflow.yml\nfeature-test:\n  if: startsWith(github.ref, 'refs/heads/feature/')\n  runs-on: ubuntu-latest\n  steps:\n    - name: Ejecutar tests\n      run: cargo test --workspace\n    - name: Linting\n      run: cargo clippy -- -D warnings\n</code></pre> <pre><code>develop-deploy:\n  if: github.ref == 'refs/heads/develop'\n  runs-on: ubuntu-latest\n  environment: development\n  steps:\n    - name: Deploy a desarrollo\n      run: kubectl apply -f k8s/dev/\n</code></pre> <pre><code>release-test:\n  if: startsWith(github.ref, 'refs/heads/release/')\n  runs-on: ubuntu-latest\n  environment: staging\n  steps:\n    - name: Tests de integraci\u00f3n\n      run: cargo test --workspace --release\n    - name: Deploy a staging\n      run: kubectl apply -f k8s/staging/\n</code></pre> <pre><code>production-deploy:\n  if: github.ref == 'refs/heads/main'\n  runs-on: ubuntu-latest\n  environment: production\n  steps:\n    - name: Deploy a producci\u00f3n\n      run: kubectl apply -f k8s/prod/\n</code></pre>"},{"location":"development/gitflow/#convenciones-de-commits","title":"\ud83d\udcdd Convenciones de Commits","text":""},{"location":"development/gitflow/#estructura-de-commits","title":"Estructura de Commits","text":"<pre><code>&lt;tipo&gt;(&lt;alcance&gt;): &lt;descripci\u00f3n&gt;\n\n[body opcional]\n\n[footer opcional]\n</code></pre>"},{"location":"development/gitflow/#tipos-de-commits","title":"Tipos de Commits","text":"Tipo Descripci\u00f3n Ejemplo <code>feat</code> Nueva funcionalidad <code>feat(auth): agregar autenticaci\u00f3n FIDO2</code> <code>fix</code> Correcci\u00f3n de bug <code>fix(db): corregir conexi\u00f3n PostgreSQL</code> <code>docs</code> Documentaci\u00f3n <code>docs(api): actualizar documentaci\u00f3n GraphQL</code> <code>style</code> Formato, espacios <code>style(frontend): aplicar prettier</code> <code>refactor</code> Refactorizaci\u00f3n <code>refactor(backend): optimizar m\u00f3dulo identity</code> <code>test</code> Tests <code>test(contracts): agregar tests Cairo</code> <code>chore</code> Tareas de mantenimiento <code>chore(deps): actualizar dependencias</code>"},{"location":"development/gitflow/#ejemplos-de-commits","title":"Ejemplos de Commits","text":"<pre><code># Feature\ngit commit -m \"feat(marketplace): implementar sistema de reputaci\u00f3n bidireccional\"\n\n# Fix\ngit commit -m \"fix(auth): corregir validaci\u00f3n de humanity_proof_key\"\n\n# Breaking change\ngit commit -m \"feat(api)!: cambiar endpoint GraphQL de /graphql a /api/graphql\n\nBREAKING CHANGE: El endpoint GraphQL ahora requiere autenticaci\u00f3n JWT\"\n\n# Multi-l\u00ednea\ngit commit -m \"feat(blockchain): implementar contrato LifeLearningPassport\n\n- Agregar storage para interacciones de aprendizaje\n- Implementar verificaci\u00f3n de firma Ed25519\n- A\u00f1adir eventos para auditor\u00eda\n\nCloses #123\"\n</code></pre>"},{"location":"development/gitflow/#versionado-semantico","title":"\ud83c\udff7\ufe0f Versionado Sem\u00e1ntico","text":""},{"location":"development/gitflow/#formato-de-versiones","title":"Formato de Versiones","text":"<pre><code>MAJOR.MINOR.PATCH\n</code></pre> <ul> <li>MAJOR: Cambios incompatibles en la API</li> <li>MINOR: Nueva funcionalidad compatible</li> <li>PATCH: Correcciones de bugs compatibles</li> </ul>"},{"location":"development/gitflow/#ejemplos","title":"Ejemplos","text":"<pre><code>1.0.0  # Primera versi\u00f3n estable\n1.1.0  # Nueva funcionalidad\n1.1.1  # Correcci\u00f3n de bug\n2.0.0  # Cambio mayor (breaking change)\n</code></pre>"},{"location":"development/gitflow/#automatizacion-de-versionado","title":"Automatizaci\u00f3n de Versionado","text":"<pre><code># En release branch\ngit flow release start 1.2.0\n\n# El CI/CD autom\u00e1ticamente:\n# 1. Actualiza VERSION\n# 2. Genera CHANGELOG.md\n# 3. Crea tag v1.2.0\n# 4. Despliega a staging\n\ngit flow release finish 1.2.0\n</code></pre>"},{"location":"development/gitflow/#scripts-de-utilidad","title":"\ud83d\udd27 Scripts de Utilidad","text":""},{"location":"development/gitflow/#scripts-disponibles","title":"Scripts Disponibles","text":"<pre><code># Configuraci\u00f3n\n./scripts/gitflow-setup.sh install     # Instalar git-flow\n./scripts/gitflow-setup.sh configure   # Configurar GitFlow\n./scripts/gitflow-setup.sh status      # Ver estado actual\n\n# Utilidades\n./scripts/create-release.sh 1.2.0      # Crear release\n./scripts/create-hotfix.sh critical    # Crear hotfix\n./scripts/sync-branches.sh             # Sincronizar ramas\n</code></pre>"},{"location":"development/gitflow/#comandos-make","title":"Comandos Make","text":"<pre><code># GitFlow\nmake gitflow-setup                     # Configurar GitFlow\nmake gitflow-status                    # Ver estado\nmake create-release VERSION=1.2.0     # Crear release\nmake create-hotfix NAME=critical       # Crear hotfix\n\n# Desarrollo\nmake dev-setup                         # Setup completo\nmake test-all                          # Ejecutar todos los tests\nmake lint-all                          # Linting completo\n</code></pre>"},{"location":"development/gitflow/#mejores-practicas","title":"\ud83d\udea8 Mejores Pr\u00e1cticas","text":""},{"location":"development/gitflow/#hacer","title":"\u2705 Hacer","text":"<ul> <li>Usar nombres descriptivos para branches</li> <li>Hacer commits peque\u00f1os y frecuentes</li> <li>Escribir mensajes de commit claros</li> <li>Hacer merge requests para review</li> <li>Mantener <code>main</code> siempre estable</li> <li>Sincronizar <code>develop</code> regularmente</li> </ul>"},{"location":"development/gitflow/#evitar","title":"\u274c Evitar","text":"<ul> <li>Commits directos a <code>main</code></li> <li>Merge sin review de c\u00f3digo</li> <li>Branches largos sin merge</li> <li>Commits sin mensaje descriptivo</li> <li>Saltarse tests en CI/CD</li> </ul>"},{"location":"development/gitflow/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"development/gitflow/#problemas-comunes","title":"Problemas Comunes","text":"\u274c Error: 'git-flow' no encontrado\u274c Error: Branch 'develop' no existe\u274c Error: Merge conflicts\u274c Error: Branch protection rules <pre><code># Instalar git-flow\n./scripts/gitflow-setup.sh install\n\n# Verificar instalaci\u00f3n\ngit flow version\n</code></pre> <pre><code># Crear branch develop\ngit checkout -b develop\ngit push -u origin develop\n\n# Reconfigurar GitFlow\n./scripts/gitflow-setup.sh configure\n</code></pre> <pre><code># Resolver conflictos\ngit status\n# Editar archivos con conflictos\ngit add .\ngit commit -m \"resolve: merge conflicts\"\n\n# Continuar con GitFlow\ngit flow feature finish feature-name\n</code></pre> <pre><code># Verificar reglas en GitHub\n# Usar Pull Requests en lugar de push directo\ngit push origin feature/nueva-funcionalidad\n# Crear PR desde GitHub UI\n</code></pre>"},{"location":"development/gitflow/#recursos-adicionales","title":"\ud83d\udcda Recursos Adicionales","text":"<ul> <li>\ud83d\udcd6 Documentaci\u00f3n oficial: GitFlow Workflow</li> <li>\ud83c\udfa5 Video tutorial: GitFlow Explained</li> <li>\ud83d\udcdd Conventional Commits: conventionalcommits.org</li> <li>\ud83c\udff7\ufe0f Semantic Versioning: semver.org</li> </ul>"},{"location":"development/gitflow/#soporte","title":"\ud83c\udd98 Soporte","text":"<p>Si tienes problemas con GitFlow:</p> <ul> <li>\ud83d\udcd6 Documentaci\u00f3n: Revisa esta gu\u00eda</li> <li>\ud83d\udc1b Issues: Reporta en GitHub Issues</li> <li>\ud83d\udcac Discord: Pregunta en #gitflow</li> <li>\ud83d\udce7 Email: dev@keikolatam.app</li> </ul> <p>\u00daltima actualizaci\u00f3n: 23 de septiembre de 2025</p>"},{"location":"development/keiko-cairo-contracts/","title":"Contratos Cairo para Keiko","text":""},{"location":"development/keiko-cairo-contracts/#casos-de-uso-especificos-para-keiko","title":"\ud83c\udfaf Casos de Uso Espec\u00edficos para Keiko","text":"<p>Este documento contiene los contratos Cairo espec\u00edficos para el proyecto Keiko, incluyendo Proof-of-Humanity y Learning Interactions.</p>"},{"location":"development/keiko-cairo-contracts/#proof-of-humanity-contract","title":"\ud83d\udd10 Proof-of-Humanity Contract","text":""},{"location":"development/keiko-cairo-contracts/#contrato-principal","title":"Contrato Principal","text":"<pre><code>#[contract]\nmod ProofOfHumanity {\n    use starknet::{\n        get_caller_address, get_contract_address, get_block_timestamp,\n        ContractAddress\n    };\n    use starknet::crypto::{sha256, verify_signature};\n    use starknet::storage::{Map, LegacyMap};\n\n    #[storage]\n    struct Storage {\n        // Almacena humanity_proof_key por cuenta\n        humanity_proof_keys: Map&lt;felt252, felt252&gt;,\n        // Almacena pasaportes de aprendizaje por cuenta\n        learning_passport: Map&lt;felt252, LegacyMap&lt;felt252, felt252&gt;&gt;,\n        // Contador de humanos verificados\n        verified_humans_count: u256,\n        // Mapeo de humanity_proof_key a cuenta (para recuperaci\u00f3n)\n        key_to_account: Map&lt;felt252, felt252&gt;,\n    }\n\n    #[event]\n    #[derive(Drop, Serde)]\n    struct HumanityVerified {\n        account: felt252,\n        humanity_proof_key: felt252,\n        timestamp: u64,\n    }\n\n    #[event]\n    #[derive(Drop, Serde)]\n    struct IdentityRecovered {\n        old_account: felt252,\n        new_account: felt252,\n        humanity_proof_key: felt252,\n        timestamp: u64,\n    }\n\n    #[constructor]\n    fn constructor() {\n        verified_humans_count::write(0);\n    }\n\n    #[external]\n    fn verify_humanity(proof: felt252, humanity_proof_key: felt252) {\n        // Verificar que la prueba STARK es v\u00e1lida\n        assert(verify_stark_proof(proof, humanity_proof_key), 'Invalid proof');\n\n        let caller = get_caller_address();\n        let timestamp = get_block_timestamp();\n\n        // Verificar si ya existe una cuenta con esta humanity_proof_key\n        let existing_account = key_to_account::read(humanity_proof_key);\n\n        if (existing_account != 0) {\n            // Recuperaci\u00f3n de identidad\n            let old_account = existing_account;\n\n            // Transferir historial de aprendizaje\n            transfer_learning_history(old_account, caller);\n\n            // Actualizar mapeo\n            key_to_account::write(humanity_proof_key, caller);\n            humanity_proof_keys::write(caller, humanity_proof_key);\n\n            IdentityRecovered {\n                old_account,\n                new_account: caller,\n                humanity_proof_key,\n                timestamp,\n            }.emit();\n        } else {\n            // Nueva verificaci\u00f3n de humanidad\n            humanity_proof_keys::write(caller, humanity_proof_key);\n            key_to_account::write(humanity_proof_key, caller);\n            verified_humans_count::write(verified_humans_count::read() + 1);\n\n            HumanityVerified {\n                account: caller,\n                humanity_proof_key,\n                timestamp,\n            }.emit();\n        }\n    }\n\n    #[view]\n    fn get_humanity_proof_key(account: felt252) -&gt; felt252 {\n        humanity_proof_keys::read(account)\n    }\n\n    #[view]\n    fn is_verified_human(account: felt252) -&gt; bool {\n        humanity_proof_keys::read(account) != 0\n    }\n\n    #[view]\n    fn get_verified_humans_count() -&gt; u256 {\n        verified_humans_count::read()\n    }\n\n    // Funci\u00f3n interna para transferir historial de aprendizaje\n    #[internal]\n    fn transfer_learning_history(from_account: felt252, to_account: felt252) {\n        // Implementar l\u00f3gica de transferencia de historial\n        // Esto se conectar\u00eda con el contrato de Learning Interactions\n    }\n\n    // Funci\u00f3n interna para verificar pruebas STARK\n    #[internal]\n    fn verify_stark_proof(proof: felt252, humanity_proof_key: felt252) -&gt; bool {\n        // Implementar verificaci\u00f3n de prueba STARK\n        // Esta funci\u00f3n se conectar\u00eda con el sistema de verificaci\u00f3n STARK\n        true // Placeholder\n    }\n}\n</code></pre>"},{"location":"development/keiko-cairo-contracts/#learning-interactions-contract","title":"\ud83d\udcda Learning Interactions Contract","text":""},{"location":"development/keiko-cairo-contracts/#contrato-de-interacciones-de-aprendizaje","title":"Contrato de Interacciones de Aprendizaje","text":"<pre><code>#[contract]\nmod LearningInteractions {\n    use starknet::{\n        get_caller_address, get_block_timestamp, get_block_number,\n        ContractAddress\n    };\n    use starknet::crypto::verify_signature;\n    use starknet::storage::{Map, Vec, VecMapped};\n\n    #[storage]\n    struct Storage {\n        // Interacciones por usuario\n        interactions: Map&lt;felt252, Vec&lt;Interaction&gt;&gt;,\n        // Contador global de interacciones\n        interaction_count: u256,\n        // Mapeo de ID de interacci\u00f3n a datos\n        interaction_data: Map&lt;u256, Interaction&gt;,\n        // Sesiones tutoriales por usuario\n        tutorial_sessions: Map&lt;felt252, Vec&lt;TutorialSession&gt;&gt;,\n        // Contador de sesiones\n        session_count: u256,\n    }\n\n    #[derive(Serde, Drop, Copy, PartialEq)]\n    struct Interaction {\n        id: u256,\n        data: felt252,\n        timestamp: u64,\n        user: felt252,\n        session_id: Option&lt;u256&gt;,\n        interaction_type: InteractionType,\n    }\n\n    #[derive(Serde, Drop, Copy, PartialEq)]\n    enum InteractionType {\n        Question,\n        Answer,\n        Exercise,\n        Discussion,\n        Evaluation,\n        Individual,\n    }\n\n    #[derive(Serde, Drop, Copy, PartialEq)]\n    struct TutorialSession {\n        id: u256,\n        user: felt252,\n        tutor: felt252,\n        start_time: u64,\n        end_time: Option&lt;u64&gt;,\n        interactions_count: u256,\n        session_type: SessionType,\n    }\n\n    #[derive(Serde, Drop, Copy, PartialEq)]\n    enum SessionType {\n        HumanTutor,\n        AITutor,\n        GroupStudy,\n        IndividualStudy,\n    }\n\n    #[event]\n    #[derive(Drop, Serde)]\n    struct InteractionCreated {\n        user: felt252,\n        interaction_id: u256,\n        session_id: Option&lt;u256&gt;,\n        interaction_type: InteractionType,\n        timestamp: u64,\n    }\n\n    #[event]\n    #[derive(Drop, Serde)]\n    struct TutorialSessionStarted {\n        session_id: u256,\n        user: felt252,\n        tutor: felt252,\n        session_type: SessionType,\n        timestamp: u64,\n    }\n\n    #[event]\n    #[derive(Drop, Serde)]\n    struct TutorialSessionEnded {\n        session_id: u256,\n        user: felt252,\n        interactions_count: u256,\n        duration: u64,\n        timestamp: u64,\n    }\n\n    #[constructor]\n    fn constructor() {\n        interaction_count::write(0);\n        session_count::write(0);\n    }\n\n    #[external]\n    fn create_interaction(\n        data: felt252, \n        signature: felt252,\n        session_id: Option&lt;u256&gt;,\n        interaction_type: InteractionType\n    ) {\n        let caller = get_caller_address();\n\n        // Verificar que el usuario es un humano verificado\n        let humanity_proof_key = get_humanity_proof_key(caller);\n        assert(humanity_proof_key != 0, 'Not verified human');\n\n        // Verificar firma Ed25519\n        assert(\n            verify_signature(humanity_proof_key, data, signature), \n            'Invalid signature'\n        );\n\n        let interaction_id = interaction_count::read();\n        let timestamp = get_block_timestamp();\n\n        let interaction = Interaction {\n            id: interaction_id,\n            data,\n            timestamp,\n            user: caller,\n            session_id,\n            interaction_type,\n        };\n\n        // Almacenar interacci\u00f3n\n        interactions::append(caller, interaction);\n        interaction_data::write(interaction_id, interaction);\n        interaction_count::write(interaction_id + 1);\n\n        // Si es parte de una sesi\u00f3n, actualizar contador\n        if (session_id.is_some()) {\n            let session_id_value = session_id.unwrap();\n            update_session_interaction_count(session_id_value);\n        }\n\n        InteractionCreated {\n            user: caller,\n            interaction_id,\n            session_id,\n            interaction_type,\n            timestamp,\n        }.emit();\n    }\n\n    #[external]\n    fn start_tutorial_session(\n        tutor: felt252,\n        session_type: SessionType\n    ) -&gt; u256 {\n        let caller = get_caller_address();\n        let session_id = session_count::read();\n        let timestamp = get_block_timestamp();\n\n        let session = TutorialSession {\n            id: session_id,\n            user: caller,\n            tutor,\n            start_time: timestamp,\n            end_time: Option::None,\n            interactions_count: 0,\n            session_type,\n        };\n\n        tutorial_sessions::append(caller, session);\n        session_count::write(session_id + 1);\n\n        TutorialSessionStarted {\n            session_id,\n            user: caller,\n            tutor,\n            session_type,\n            timestamp,\n        }.emit();\n\n        session_id\n    }\n\n    #[external]\n    fn end_tutorial_session(session_id: u256) {\n        let caller = get_caller_address();\n        let timestamp = get_block_timestamp();\n\n        // Buscar y actualizar la sesi\u00f3n\n        let sessions = tutorial_sessions::read(caller);\n        let mut updated_sessions = Vec::new();\n\n        let mut i = 0;\n        loop {\n            if (i &gt;= sessions.len()) {\n                break;\n            }\n            let session = *sessions.at(i);\n            if (session.id == session_id) {\n                let updated_session = TutorialSession {\n                    id: session.id,\n                    user: session.user,\n                    tutor: session.tutor,\n                    start_time: session.start_time,\n                    end_time: Option::Some(timestamp),\n                    interactions_count: session.interactions_count,\n                    session_type: session.session_type,\n                };\n                updated_sessions.append(updated_session);\n            } else {\n                updated_sessions.append(session);\n            }\n            i += 1;\n        }\n\n        tutorial_sessions::write(caller, updated_sessions);\n\n        TutorialSessionEnded {\n            session_id,\n            user: caller,\n            interactions_count: get_session_interactions_count(session_id),\n            duration: timestamp - get_session_start_time(session_id),\n            timestamp,\n        }.emit();\n    }\n\n    #[view]\n    fn get_user_interactions(user: felt252) -&gt; Vec&lt;Interaction&gt; {\n        interactions::read(user)\n    }\n\n    #[view]\n    fn get_interaction_by_id(interaction_id: u256) -&gt; Interaction {\n        interaction_data::read(interaction_id)\n    }\n\n    #[view]\n    fn get_user_sessions(user: felt252) -&gt; Vec&lt;TutorialSession&gt; {\n        tutorial_sessions::read(user)\n    }\n\n    #[view]\n    fn get_total_interactions() -&gt; u256 {\n        interaction_count::read()\n    }\n\n    // Funciones internas\n    #[internal]\n    fn get_humanity_proof_key(account: felt252) -&gt; felt252 {\n        // Esta funci\u00f3n se conectar\u00eda con el contrato ProofOfHumanity\n        0 // Placeholder\n    }\n\n    #[internal]\n    fn update_session_interaction_count(session_id: u256) {\n        // Implementar l\u00f3gica para actualizar contador de interacciones en sesi\u00f3n\n    }\n\n    #[internal]\n    fn get_session_interactions_count(session_id: u256) -&gt; u256 {\n        // Implementar l\u00f3gica para obtener contador de interacciones\n        0 // Placeholder\n    }\n\n    #[internal]\n    fn get_session_start_time(session_id: u256) -&gt; u64 {\n        // Implementar l\u00f3gica para obtener tiempo de inicio de sesi\u00f3n\n        0 // Placeholder\n    }\n}\n</code></pre>"},{"location":"development/keiko-cairo-contracts/#macros-de-utilidades-para-keiko","title":"\ud83d\udee0\ufe0f Macros de Utilidades para Keiko","text":""},{"location":"development/keiko-cairo-contracts/#estructuras-de-datos","title":"Estructuras de Datos","text":"<pre><code>#[derive(Serde, Drop, Copy, PartialEq)]\nstruct Interaction {\n    id: u256,\n    data: felt252,\n    timestamp: u64,\n    user: felt252,\n    session_id: Option&lt;u256&gt;,\n    interaction_type: InteractionType,\n}\n\n#[derive(Serde, Drop, Copy, PartialEq)]\nstruct TutorialSession {\n    id: u256,\n    user: felt252,\n    tutor: felt252,\n    start_time: u64,\n    end_time: Option&lt;u64&gt;,\n    interactions_count: u256,\n    session_type: SessionType,\n}\n\n#[derive(Serde, Drop, Copy, PartialEq)]\nenum InteractionType {\n    Question,\n    Answer,\n    Exercise,\n    Discussion,\n    Evaluation,\n    Individual,\n}\n\n#[derive(Serde, Drop, Copy, PartialEq)]\nenum SessionType {\n    HumanTutor,\n    AITutor,\n    GroupStudy,\n    IndividualStudy,\n}\n</code></pre>"},{"location":"development/keiko-cairo-contracts/#funciones-de-validacion","title":"Funciones de Validaci\u00f3n","text":"<pre><code>// Macros para manejo de errores espec\u00edficos de Keiko\n#[inline(always)]\nfn assert_humanity_proof(proof: felt252, key: felt252) {\n    assert(verify_stark_proof(proof, key), 'Invalid humanity proof');\n}\n\n#[inline(always)]\nfn assert_valid_signature(data: felt252, signature: felt252, key: felt252) {\n    assert(verify_signature(key, data, signature), 'Invalid signature');\n}\n\n#[inline(always)]\nfn assert_verified_human(account: felt252) {\n    let humanity_proof_key = get_humanity_proof_key(account);\n    assert(humanity_proof_key != 0, 'Not verified human');\n}\n\n#[inline(always)]\nfn assert_valid_session(session_id: u256, user: felt252) {\n    // Implementar validaci\u00f3n de sesi\u00f3n\n    assert(session_id &lt; get_total_sessions(), 'Invalid session ID');\n}\n</code></pre>"},{"location":"development/keiko-cairo-contracts/#patrones-especificos-para-keiko","title":"\ud83d\ude80 Patrones Espec\u00edficos para Keiko","text":""},{"location":"development/keiko-cairo-contracts/#constructor-con-validacion-de-humanidad","title":"Constructor con Validaci\u00f3n de Humanidad","text":"<pre><code>#[constructor]\nfn constructor(initial_owner: felt252, humanity_proof_key: felt252) {\n    assert(initial_owner != 0, 'Invalid owner');\n    assert(humanity_proof_key != 0, 'Invalid humanity proof key');\n\n    owner::write(initial_owner);\n    humanity_proof_keys::write(initial_owner, humanity_proof_key);\n    verified_humans_count::write(1);\n}\n</code></pre>"},{"location":"development/keiko-cairo-contracts/#funcion-con-verificacion-de-humanidad","title":"Funci\u00f3n con Verificaci\u00f3n de Humanidad","text":"<pre><code>#[external]\nfn human_only_function(data: felt252, signature: felt252) {\n    let caller = get_caller_address();\n\n    // Verificar que es un humano verificado\n    assert_verified_human(caller);\n\n    // Verificar firma\n    let humanity_proof_key = get_humanity_proof_key(caller);\n    assert_valid_signature(data, signature, humanity_proof_key);\n\n    // L\u00f3gica solo para humanos verificados\n    process_human_interaction(caller, data);\n}\n</code></pre>"},{"location":"development/keiko-cairo-contracts/#funcion-con-recuperacion-de-identidad","title":"Funci\u00f3n con Recuperaci\u00f3n de Identidad","text":"<pre><code>#[external]\nfn recover_identity(proof: felt252, humanity_proof_key: felt252) {\n    let caller = get_caller_address();\n\n    // Verificar prueba STARK\n    assert_humanity_proof(proof, humanity_proof_key);\n\n    // Verificar si ya existe una cuenta con esta humanity_proof_key\n    let existing_account = key_to_account::read(humanity_proof_key);\n\n    if (existing_account != 0) {\n        // Transferir historial de aprendizaje\n        transfer_learning_history(existing_account, caller);\n\n        // Actualizar mapeos\n        key_to_account::write(humanity_proof_key, caller);\n        humanity_proof_keys::write(caller, humanity_proof_key);\n\n        // Emitir evento de recuperaci\u00f3n\n        IdentityRecovered {\n            old_account: existing_account,\n            new_account: caller,\n            humanity_proof_key,\n            timestamp: get_block_timestamp(),\n        }.emit();\n    }\n}\n</code></pre>"},{"location":"development/keiko-cairo-contracts/#referencias","title":"\ud83d\udcd6 Referencias","text":"<ul> <li>Cairo Book - Smart Contracts</li> <li>Starknet Book - Smart Contracts</li> <li>Keiko Requirements</li> </ul> <p>\ud83d\udca1 Tip: Estos contratos est\u00e1n dise\u00f1ados espec\u00edficamente para la arquitectura h\u00edbrida de Keiko y se integran con el sistema de proof-of-humanity y las interacciones de aprendizaje xAPI.</p>"},{"location":"getting-started/installation/","title":"\ud83d\ude80 Instalaci\u00f3n de Keiko Latam","text":"<p>Esta gu\u00eda te ayudar\u00e1 a instalar y configurar el entorno de desarrollo completo de Keiko Latam en tu sistema local.</p>"},{"location":"getting-started/installation/#prerrequisitos","title":"\ud83d\udccb Prerrequisitos","text":""},{"location":"getting-started/installation/#sistema-operativo","title":"Sistema Operativo","text":"<ul> <li>Linux: Ubuntu 20.04+ o equivalente</li> <li>WSL2: Windows Subsystem for Linux 2 con Ubuntu 24.04 LTS</li> <li>macOS: 10.15+ (Catalina o superior)</li> </ul>"},{"location":"getting-started/installation/#hardware-minimo","title":"Hardware M\u00ednimo","text":"<ul> <li>RAM: 8GB (16GB recomendado)</li> <li>Almacenamiento: 20GB de espacio libre</li> <li>CPU: 4 cores (8 cores recomendado)</li> </ul>"},{"location":"getting-started/installation/#instalacion-de-dependencias","title":"\ud83d\udd27 Instalaci\u00f3n de Dependencias","text":""},{"location":"getting-started/installation/#1-instalacion-de-rust","title":"1. Instalaci\u00f3n de Rust","text":"<pre><code># Instalar Rust con rustup\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource ~/.cargo/env\n\n# Instalar toolchain nightly para Cairo\nrustup toolchain install nightly\nrustup default stable\nrustup target add wasm32-unknown-unknown --toolchain nightly\n</code></pre> \ud83d\udc27 Ubuntu/Debian\ud83c\udf4e macOS <pre><code># Actualizar paquetes\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Instalar dependencias del sistema\nsudo apt install -y \\\n    build-essential \\\n    pkg-config \\\n    libssl-dev \\\n    libudev-dev \\\n    libclang-dev \\\n    cmake \\\n    git \\\n    curl \\\n    wget \\\n    unzip \\\n    python3 \\\n    python3-pip \\\n    python3-venv \\\n    docker.io \\\n    docker-compose \\\n    postgresql-client \\\n    redis-tools\n</code></pre> <pre><code># Instalar Homebrew si no est\u00e1 instalado\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Instalar dependencias\nbrew install \\\n    pkg-config \\\n    openssl \\\n    cmake \\\n    git \\\n    curl \\\n    wget \\\n    python3 \\\n    docker \\\n    docker-compose \\\n    postgresql \\\n    redis\n</code></pre>"},{"location":"getting-started/installation/#2-instalacion-de-cairo-y-starknet","title":"2. Instalaci\u00f3n de Cairo y Starknet","text":"<pre><code># Instalar asdf (version manager)\ngit clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.13.1\necho '. \"$HOME/.asdf/asdf.sh\"' &gt;&gt; ~/.bashrc\necho '. \"$HOME/.asdf/completions/asdf.bash\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Instalar Scarb (package manager de Cairo)\ncurl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh\n\n# Instalar Starknet Foundry\ncurl -L https://raw.githubusercontent.com/foundry-rs/starknet-foundry/master/scripts/install.sh | sh\n\n# Verificar instalaci\u00f3n\nscarb --version\nsnforge --version\n</code></pre>"},{"location":"getting-started/installation/#3-instalacion-de-flutter","title":"3. Instalaci\u00f3n de Flutter","text":"<pre><code># Clonar Flutter\ngit clone https://github.com/flutter/flutter.git -b stable ~/flutter\nexport PATH=\"$PATH:$HOME/flutter/bin\"\n\n# Verificar instalaci\u00f3n\nflutter doctor\nflutter --version\n</code></pre>"},{"location":"getting-started/installation/#4-instalacion-de-gitflow","title":"4. Instalaci\u00f3n de GitFlow","text":"\ud83d\udc27 Ubuntu/Debian\ud83c\udf4e macOS\ud83d\udd27 Instalaci\u00f3n Manual <pre><code>sudo apt install -y git-flow\n</code></pre> <pre><code>brew install git-flow\n</code></pre> <pre><code># Descargar e instalar git-flow\nwget --no-check-certificate -q https://raw.github.com/nvie/gitflow/develop/contrib/gitflow-installer.sh\nchmod +x gitflow-installer.sh\nsudo ./gitflow-installer.sh\n</code></pre>"},{"location":"getting-started/installation/#configuracion-de-podman","title":"\ud83d\udc33 Configuraci\u00f3n de Podman","text":""},{"location":"getting-started/installation/#1-instalar-podman","title":"1. Instalar Podman","text":"\ud83d\udc27 Ubuntu/Debian\ud83c\udf4e macOS\ud83d\udc33 Docker (Alternativa) <pre><code># Instalar Podman\nsudo apt install -y podman podman-compose\n\n# Verificar instalaci\u00f3n\npodman --version\npodman-compose --version\n</code></pre> <pre><code># Instalar Podman con Homebrew\nbrew install podman podman-compose\n\n# Inicializar m\u00e1quina virtual (macOS)\npodman machine init\npodman machine start\n</code></pre> <pre><code># Si prefieres usar Docker en lugar de Podman\n# En Windows, instalar Docker Desktop para WSL2\ndocker context use wsl\n</code></pre>"},{"location":"getting-started/installation/#2-configurar-podman-compose","title":"2. Configurar Podman Compose","text":"<pre><code># Crear red para Keiko\npodman network create keiko-network\n\n# Verificar configuraci\u00f3n\npodman --version\npodman-compose --version\n\n# Configurar alias para compatibilidad (opcional)\necho \"alias docker=podman\" &gt;&gt; ~/.bashrc\necho \"alias docker-compose=podman-compose\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"getting-started/installation/#configuracion-de-bases-de-datos","title":"\ud83d\uddc4\ufe0f Configuraci\u00f3n de Bases de Datos","text":""},{"location":"getting-started/installation/#1-postgresql","title":"1. PostgreSQL","text":"<pre><code># Instalar PostgreSQL (Ubuntu)\nsudo apt install -y postgresql postgresql-contrib\n\n# Crear usuario y bases de datos\nsudo -u postgres psql &lt;&lt; EOF\nCREATE USER keiko_user WITH PASSWORD 'keiko_password';\nCREATE DATABASE keiko_identity OWNER keiko_user;\nCREATE DATABASE keiko_learning OWNER keiko_user;\nCREATE DATABASE keiko_reputation OWNER keiko_user;\nCREATE DATABASE keiko_passport OWNER keiko_user;\nCREATE DATABASE keiko_governance OWNER keiko_user;\nCREATE DATABASE keiko_marketplace OWNER keiko_user;\nGRANT ALL PRIVILEGES ON DATABASE keiko_identity TO keiko_user;\nGRANT ALL PRIVILEGES ON DATABASE keiko_learning TO keiko_user;\nGRANT ALL PRIVILEGES ON DATABASE keiko_reputation TO keiko_user;\nGRANT ALL PRIVILEGES ON DATABASE keiko_passport TO keiko_user;\nGRANT ALL PRIVILEGES ON DATABASE keiko_governance TO keiko_user;\nGRANT ALL PRIVILEGES ON DATABASE keiko_marketplace TO keiko_user;\n\\q\nEOF\n</code></pre>"},{"location":"getting-started/installation/#2-redis","title":"2. Redis","text":"<pre><code># Instalar Redis\nsudo apt install -y redis-server\n\n# Configurar Redis para desarrollo\nsudo systemctl enable redis-server\nsudo systemctl start redis-server\n\n# Verificar conexi\u00f3n\nredis-cli ping\n</code></pre>"},{"location":"getting-started/installation/#configuracion-del-entorno-python","title":"\ud83d\udc0d Configuraci\u00f3n del Entorno Python","text":""},{"location":"getting-started/installation/#1-crear-entorno-virtual","title":"1. Crear Entorno Virtual","text":"<pre><code># Crear entorno virtual\npython3 -m venv .venv\nsource .venv/bin/activate\n\n# Actualizar pip\npip install --upgrade pip\n</code></pre>"},{"location":"getting-started/installation/#2-instalar-dependencias-python","title":"2. Instalar Dependencias Python","text":"<pre><code># Instalar dependencias para Proof-of-Humanity\npip install \\\n    opencv-python \\\n    biopython \\\n    cairo-lang \\\n    numpy \\\n    scipy \\\n    matplotlib \\\n    pillow \\\n    cryptography \\\n    pyjwt \\\n    requests \\\n    python-dotenv\n</code></pre>"},{"location":"getting-started/installation/#configuracion-rapida-con-scripts","title":"\ud83d\ude80 Configuraci\u00f3n R\u00e1pida con Scripts","text":""},{"location":"getting-started/installation/#1-clonar-repositorio","title":"1. Clonar Repositorio","text":"<pre><code># Clonar el repositorio\ngit clone https://github.com/keikolatam/dapp-monorepo.git\ncd dapp-monorepo\n\n# Configurar GitFlow\n./scripts/gitflow-setup.sh configure\n</code></pre>"},{"location":"getting-started/installation/#2-configuracion-automatica","title":"2. Configuraci\u00f3n Autom\u00e1tica","text":"<pre><code># Ejecutar configuraci\u00f3n completa\nmake dev-setup\n\n# O configuraci\u00f3n paso a paso\nmake install-deps    # Instalar dependencias\nmake infra-setup     # Configurar infraestructura\nmake db-setup        # Configurar bases de datos\nmake poh-setup       # Configurar Proof-of-Humanity\n</code></pre>"},{"location":"getting-started/installation/#verificacion-de-la-instalacion","title":"\u2705 Verificaci\u00f3n de la Instalaci\u00f3n","text":""},{"location":"getting-started/installation/#1-verificar-componentes","title":"1. Verificar Componentes","text":"<pre><code># Ejecutar verificaci\u00f3n completa\nmake verify-setup\n\n# O verificar individualmente\n./scripts/verify-rust.sh\n./scripts/verify-cairo.sh\n./scripts/verify-flutter.sh\n./scripts/verify-docker.sh\n</code></pre>"},{"location":"getting-started/installation/#2-tests-de-conectividad","title":"2. Tests de Conectividad","text":"<pre><code># Verificar conectividad de red\nping -c 1 github.com\nping -c 1 starknet.io\n\n# Verificar servicios locales\npg_isready -h localhost -p 5432\nredis-cli ping\n</code></pre>"},{"location":"getting-started/installation/#configuracion-de-variables-de-entorno","title":"\ud83d\udd27 Configuraci\u00f3n de Variables de Entorno","text":""},{"location":"getting-started/installation/#1-crear-archivo-env","title":"1. Crear Archivo .env","text":"<pre><code># Copiar plantilla\ncp .env.example .env\n\n# Editar configuraci\u00f3n\nnano .env\n</code></pre>"},{"location":"getting-started/installation/#2-variables-importantes","title":"2. Variables Importantes","text":"<pre><code># Base de datos\nDATABASE_URL=postgresql://keiko_user:keiko_password@localhost:5432\nREDIS_URL=redis://localhost:6379\n\n# Keikochain\nKEIKOCHAIN_RPC_URL=wss://keikochain.karnot.xyz\nKEIKOCHAIN_CHAIN_ID=0x534e5f4d41494e\n\n# JWT\nJWT_SECRET=your-super-secret-jwt-key\nJWT_EXPIRATION=24h\n\n# Proof-of-Humanity\nHUMANITY_SALT=your-humanity-proof-salt\n</code></pre>"},{"location":"getting-started/installation/#resolucion-de-problemas","title":"\ud83d\udc1b Resoluci\u00f3n de Problemas","text":""},{"location":"getting-started/installation/#problemas-comunes","title":"Problemas Comunes","text":"\u274c Error de permisos Podman\u274c Error de conexi\u00f3n PostgreSQL\u274c Error de Cairo/Scarb\u274c Error de Flutter <pre><code># Configurar Podman para usuario rootless\npodman system migrate\n\n# O agregar usuario al grupo podman (si es necesario)\nsudo usermod -aG podman $USER\nnewgrp podman\n\n# Reiniciar servicio (si usa systemd)\nsudo systemctl restart podman\n</code></pre> <pre><code># Verificar estado del servicio\nsudo systemctl status postgresql\n\n# Reiniciar servicio\nsudo systemctl restart postgresql\n\n# Verificar configuraci\u00f3n\nsudo -u postgres psql -c \"SELECT version();\"\n</code></pre> <pre><code># Reinstalar Cairo\nasdf uninstall cairo 1.0.0\nasdf install cairo 1.0.0\n\n# Verificar PATH\necho $PATH | grep -o '[^:]*cairo[^:]*'\n</code></pre> <pre><code># Ejecutar doctor\nflutter doctor\n\n# Instalar dependencias faltantes\nflutter doctor --android-licenses\n</code></pre>"},{"location":"getting-started/installation/#proximos-pasos","title":"\ud83d\udcda Pr\u00f3ximos Pasos","text":"<p>Una vez completada la instalaci\u00f3n:</p> <ol> <li>Configuraci\u00f3n r\u00e1pida: Sigue la gu\u00eda de configuraci\u00f3n r\u00e1pida</li> <li>Primeros pasos: Explora los primeros pasos</li> <li>Desarrollo: Consulta la gu\u00eda de desarrollo</li> <li>Contribuir: Lee la gu\u00eda de contribuci\u00f3n</li> </ol>"},{"location":"getting-started/installation/#soporte","title":"\ud83c\udd98 Soporte","text":"<p>Si encuentras problemas durante la instalaci\u00f3n:</p> <ul> <li>\ud83d\udcd6 Documentaci\u00f3n: Revisa la documentaci\u00f3n completa</li> <li>\ud83d\udc1b Issues: Reporta problemas en GitHub Issues</li> <li>\ud83d\udcac Discord: \u00danete a nuestro Discord</li> <li>\ud83d\udce7 Email: Contacta a soporte@keikolatam.app</li> </ul> <p>\u00daltima actualizaci\u00f3n: 23 de septiembre de 2025</p>"},{"location":"getting-started/quick-setup/","title":"\u26a1 Configuraci\u00f3n R\u00e1pida de Keiko Latam","text":"<p>Esta gu\u00eda te permitir\u00e1 tener Keiko Latam funcionando en tu entorno local en menos de 10 minutos.</p>"},{"location":"getting-started/quick-setup/#objetivo","title":"\ud83c\udfaf Objetivo","text":"<p>Configurar un entorno de desarrollo completo de Keiko Latam con: - \u2705 Keikochain (Starknet Appchain) funcionando - \u2705 gRPC Gateway configurado - \u2705 Backend monol\u00edtico modular en Rust - \u2705 Bases de datos PostgreSQL y Redis - \u2705 Entorno Python para Proof-of-Humanity</p>"},{"location":"getting-started/quick-setup/#instalacion-en-3-pasos","title":"\ud83d\ude80 Instalaci\u00f3n en 3 Pasos","text":""},{"location":"getting-started/quick-setup/#paso-1-clonar-y-configurar","title":"Paso 1: Clonar y Configurar","text":"<pre><code># Clonar el repositorio\ngit clone https://github.com/keikolatam/dapp-monorepo.git\ncd dapp-monorepo\n\n# Hacer ejecutables los scripts\nchmod +x scripts/*.sh\n\n# Configurar GitFlow\n./scripts/gitflow-setup.sh configure\n</code></pre>"},{"location":"getting-started/quick-setup/#paso-2-configuracion-automatica","title":"Paso 2: Configuraci\u00f3n Autom\u00e1tica","text":"<pre><code># Ejecutar configuraci\u00f3n completa (recomendado)\nmake dev-setup\n\n# O paso a paso si prefieres control\nmake install-deps    # Instalar dependencias del sistema\nmake infra-setup     # Configurar Podman y servicios\nmake db-setup        # Configurar PostgreSQL y Redis\nmake poh-setup       # Configurar entorno Python\n</code></pre>"},{"location":"getting-started/quick-setup/#paso-3-verificar-instalacion","title":"Paso 3: Verificar Instalaci\u00f3n","text":"<pre><code># Verificar que todo funciona\nmake verify-setup\n\n# Ver estado de todos los componentes\nmake status\n</code></pre>"},{"location":"getting-started/quick-setup/#comandos-make-disponibles","title":"\ud83c\udf9b\ufe0f Comandos Make Disponibles","text":""},{"location":"getting-started/quick-setup/#configuracion-inicial","title":"Configuraci\u00f3n Inicial","text":"<pre><code>make dev-setup           # Configuraci\u00f3n completa\nmake install-deps        # Instalar dependencias\nmake infra-setup         # Configurar infraestructura\nmake db-setup           # Configurar bases de datos\nmake poh-setup          # Configurar Proof-of-Humanity\n</code></pre>"},{"location":"getting-started/quick-setup/#desarrollo","title":"Desarrollo","text":"<pre><code>make appchain-start      # Iniciar Keikochain\nmake grpc-gateway-start  # Iniciar gRPC Gateway\nmake backend-start       # Iniciar Backend\nmake frontend-start      # Iniciar Frontend\n</code></pre>"},{"location":"getting-started/quick-setup/#utilidades","title":"Utilidades","text":"<pre><code>make status              # Ver estado de componentes\nmake logs                # Ver logs de todos los servicios\nmake clean               # Limpiar contenedores y vol\u00famenes\nmake test-all            # Ejecutar todos los tests\n</code></pre>"},{"location":"getting-started/quick-setup/#gitflow","title":"GitFlow","text":"<pre><code>make gitflow-setup       # Configurar GitFlow\nmake gitflow-status      # Ver estado GitFlow\nmake create-release VERSION=1.0.0  # Crear release\nmake create-hotfix NAME=critical   # Crear hotfix\n</code></pre>"},{"location":"getting-started/quick-setup/#configuracion-por-componente","title":"\ud83d\udd27 Configuraci\u00f3n por Componente","text":""},{"location":"getting-started/quick-setup/#keikochain-starknet-appchain","title":"\ud83c\udf10 Keikochain (Starknet Appchain)","text":"<pre><code># Configuraci\u00f3n autom\u00e1tica\n./scripts/appchain-quick-start.sh --non-interactive\n\n# Configuraci\u00f3n manual\ncd appchain\npodman-compose up -d || docker-compose up -d\ncargo run --release create devnet\n</code></pre> <p>Verificar: <pre><code>curl -X POST http://localhost:9944 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"system_health\",\"params\":[],\"id\":1}'\n</code></pre></p>"},{"location":"getting-started/quick-setup/#grpc-gateway","title":"\ud83d\udd17 gRPC Gateway","text":"<pre><code># Configuraci\u00f3n autom\u00e1tica\n./scripts/grpc-gateway-quick-start.sh\n\n# Configuraci\u00f3n manual\ncd grpc-gateway\ncargo build --release\n./target/release/grpc-gateway\n</code></pre> <p>Verificar: <pre><code>grpcurl -plaintext localhost:50051 list\n</code></pre></p>"},{"location":"getting-started/quick-setup/#backend-monolitico","title":"\ud83d\udda5\ufe0f Backend Monol\u00edtico","text":"<pre><code># Configuraci\u00f3n autom\u00e1tica\n./scripts/backend-quick-start.sh\n\n# Configuraci\u00f3n manual\ncd backend\ncargo build\ncargo run\n</code></pre> <p>Verificar: <pre><code>curl http://localhost:8080/health\n</code></pre></p>"},{"location":"getting-started/quick-setup/#bases-de-datos","title":"\ud83d\uddc4\ufe0f Bases de Datos","text":"<pre><code># PostgreSQL\npg_isready -h localhost -p 5432\npsql -h localhost -U keiko_user -d keiko_identity -c \"SELECT version();\"\n\n# Redis\nredis-cli ping\nredis-cli info server\n</code></pre>"},{"location":"getting-started/quick-setup/#entorno-python-proof-of-humanity","title":"\ud83d\udc0d Entorno Python (Proof-of-Humanity)","text":""},{"location":"getting-started/quick-setup/#activar-entorno-virtual","title":"Activar Entorno Virtual","text":"<pre><code># Activar entorno\nsource .venv/bin/activate\n\n# Verificar dependencias\npython -c \"import cv2, Bio, cairo_lang; print('\u2705 Dependencias OK')\"\n</code></pre>"},{"location":"getting-started/quick-setup/#ejemplos-de-proof-of-humanity","title":"Ejemplos de Proof-of-Humanity","text":"<pre><code># Ejecutar ejemplos\nmake poh-examples\n\n# Generar humanity_proof_key\nmake poh-key-gen\n</code></pre> <p>Ejemplo manual: <pre><code># Activar entorno\nsource .venv/bin/activate\n\n# Ejecutar ejemplo\npython - &lt;&lt; 'EOF'\nimport hashlib, os, numpy as np\nimport cv2\nfrom Bio import SeqIO\n\n# Simular procesamiento de iris\nimg = np.random.randint(0, 255, (128,128), dtype=np.uint8)\nkernel = cv2.getGaborKernel((21, 21), 5, 0, 10, 0.5, 0, ktype=cv2.CV_32F)\nfeat = cv2.filter2D(img, cv2.CV_32F, kernel)\niris_hash = hashlib.sha256(feat.tobytes()).digest()\n\n# Simular procesamiento de genoma\ngenome_hash = hashlib.sha256(os.urandom(32)).digest()\nsalt = os.urandom(16)\n\n# Generar humanity_proof_key\ncomposite = iris_hash + genome_hash + salt\nhumanity_proof_key = hashlib.sha256(composite).hexdigest()\n\nprint(f'humanity_proof_key: {humanity_proof_key}')\nEOF\n</code></pre></p>"},{"location":"getting-started/quick-setup/#urls-de-acceso","title":"\ud83c\udf10 URLs de Acceso","text":"<p>Una vez configurado, puedes acceder a:</p> Servicio URL Descripci\u00f3n Keikochain <code>http://localhost:9944</code> RPC de Starknet Appchain gRPC Gateway <code>localhost:50051</code> gRPC Gateway Backend <code>http://localhost:8080</code> Backend monol\u00edtico API Gateway <code>http://localhost:3000</code> GraphQL API Frontend <code>http://localhost:3001</code> Aplicaci\u00f3n Flutter PostgreSQL <code>localhost:5432</code> Base de datos Redis <code>localhost:6379</code> Cache y eventos"},{"location":"getting-started/quick-setup/#tests-rapidos","title":"\ud83e\uddea Tests R\u00e1pidos","text":""},{"location":"getting-started/quick-setup/#test-de-conectividad","title":"Test de Conectividad","text":"<pre><code># Test completo del sistema\ncurl -f http://localhost:8080/health &amp;&amp; \\\ncurl -f http://localhost:3000/graphql &amp;&amp; \\\nredis-cli ping &amp;&amp; \\\npg_isready -h localhost -p 5432\n</code></pre>"},{"location":"getting-started/quick-setup/#test-de-keikochain","title":"Test de Keikochain","text":"<pre><code># Test de conexi\u00f3n a Keikochain\ncurl -X POST http://localhost:9944 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"system_health\",\"params\":[],\"id\":1}' | \\\n  jq '.result'\n</code></pre>"},{"location":"getting-started/quick-setup/#test-de-proof-of-humanity","title":"Test de Proof-of-Humanity","text":"<pre><code># Test del entorno Python\nsource .venv/bin/activate\npython -c \"\nimport cv2, numpy as np\nfrom Bio import SeqIO\nimport hashlib\nprint('\u2705 Proof-of-Humanity OK')\n\"\n</code></pre>"},{"location":"getting-started/quick-setup/#resolucion-de-problemas-rapidos","title":"\ud83d\udc1b Resoluci\u00f3n de Problemas R\u00e1pidos","text":""},{"location":"getting-started/quick-setup/#error-make-command-not-found","title":"\u274c Error: \"make: command not found\"","text":"<pre><code># Instalar make\nsudo apt install make  # Ubuntu/Debian\nbrew install make      # macOS\n</code></pre>"},{"location":"getting-started/quick-setup/#error-podman-not-running","title":"\u274c Error: \"Podman not running\"","text":"<pre><code># Iniciar Podman\nsudo systemctl start podman  # Linux\npodman machine start        # macOS (si usa m\u00e1quina virtual)\n\n# O si prefieres Docker\nsudo systemctl start docker  # Linux\nopen -a Docker              # macOS\n</code></pre>"},{"location":"getting-started/quick-setup/#error-port-already-in-use","title":"\u274c Error: \"Port already in use\"","text":"<pre><code># Verificar puertos en uso\nsudo netstat -tulpn | grep :5432\nsudo netstat -tulpn | grep :6379\n\n# Matar procesos si es necesario\nsudo kill -9 $(sudo lsof -t -i:5432)\nsudo kill -9 $(sudo lsof -t -i:6379)\n</code></pre>"},{"location":"getting-started/quick-setup/#error-permission-denied","title":"\u274c Error: \"Permission denied\"","text":"<pre><code># Hacer ejecutables los scripts\nchmod +x scripts/*.sh\nchmod +x appchain/quick-start.sh\nchmod +x grpc-gateway/quick-start.sh\nchmod +x backend/quick-start.sh\n</code></pre>"},{"location":"getting-started/quick-setup/#verificar-estado-completo","title":"\ud83d\udcca Verificar Estado Completo","text":"<pre><code># Ver estado de todos los componentes\nmake status\n\n# Ver logs en tiempo real\nmake logs\n\n# Verificar conectividad\nmake verify-setup\n</code></pre> <p>Salida esperada: <pre><code>\ud83c\udf93 Estado de Keiko Latam\n========================\n\n\u2705 Keikochain: Activo (puerto 9944)\n\u2705 gRPC Gateway: Activo (puerto 50051)\n\u2705 Backend: Activo (puerto 8080)\n\u2705 PostgreSQL: Activo (puerto 5432)\n\u2705 Redis: Activo (puerto 6379)\n\u2705 Python PoH: Activo (.venv)\n\u2705 Docker: Activo\n\u2705 GitFlow: Configurado\n</code></pre></p>"},{"location":"getting-started/quick-setup/#listo-para-desarrollar","title":"\ud83c\udf89 \u00a1Listo para Desarrollar!","text":"<p>Una vez completada la configuraci\u00f3n r\u00e1pida:</p> <ol> <li>Explorar el c\u00f3digo: Navega por la estructura del proyecto</li> <li>Leer la documentaci\u00f3n: Consulta docs/</li> <li>Hacer tu primera contribuci\u00f3n: Sigue la gu\u00eda de contribuci\u00f3n</li> <li>Unirse a la comunidad: \u00danete a nuestro Discord</li> </ol>"},{"location":"getting-started/quick-setup/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<ul> <li>\ud83d\udcd6 Documentaci\u00f3n completa: Instalaci\u00f3n detallada</li> <li>\ud83d\ude80 Primeros pasos: Gu\u00eda de primeros pasos</li> <li>\ud83d\udd27 Desarrollo: Configuraci\u00f3n de desarrollo</li> <li>\ud83e\udd1d Contribuir: Gu\u00eda de contribuci\u00f3n</li> </ul>"},{"location":"getting-started/quick-setup/#soporte-rapido","title":"\ud83c\udd98 Soporte R\u00e1pido","text":"<p>Si algo no funciona:</p> <ol> <li>Ejecutar: <code>make status</code> para ver el estado</li> <li>Revisar logs: <code>make logs</code> para ver errores</li> <li>Limpiar y reiniciar: <code>make clean &amp;&amp; make dev-setup</code></li> <li>Pedir ayuda: Discord o GitHub Issues</li> </ol> <p>Tiempo estimado de configuraci\u00f3n: 5-10 minutos \u23f1\ufe0f</p>"}]}