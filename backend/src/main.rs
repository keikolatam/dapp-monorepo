use anyhow::Result;
use tokio::signal;

#[tokio::main]
async fn main() -> Result<()> {
    // Inicializar logging
    tracing_subscriber::init();
    
    tracing::info!("ðŸŽ“ Iniciando Keiko Backend - AplicaciÃ³n MonolÃ­tica Modular");
    
    // Inicializar todos los mÃ³dulos
    identity::init().await?;
    learning_passport::init().await?;
    reputation::init().await?;
    governance::init().await?;
    marketplace::init().await?;
    selfstudy_guides::init().await?;
    
    tracing::info!("âœ… Todos los mÃ³dulos inicializados correctamente");
    
    // Configurar shutdown graceful
    let shutdown = async {
        signal::ctrl_c()
            .await
            .expect("Failed to install CTRL+C signal handler");
        tracing::info!("ðŸ›‘ SeÃ±al de shutdown recibida");
    };
    
    // TODO: Iniciar servidor HTTP y gRPC
    // let server = start_http_server();
    // let grpc_server = start_grpc_server();
    
    // Esperar shutdown
    shutdown.await;
    
    // Cerrar mÃ³dulos
    tracing::info!("ðŸ”„ Cerrando mÃ³dulos...");
    identity::shutdown().await?;
    learning_passport::shutdown().await?;
    reputation::shutdown().await?;
    governance::shutdown().await?;
    marketplace::shutdown().await?;
    selfstudy_guides::shutdown().await?;
    
    tracing::info!("ðŸ‘‹ Keiko Backend cerrado correctamente");
    Ok(())
}
