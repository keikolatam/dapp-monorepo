name: GitFlow Pipeline - Keiko Latam

on:
  push:
    branches: [main, develop, 'release/*', 'hotfix/*', 'feature/*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  REGISTRY: registry.gra.cloud.ovh.net/keikolatam
  IMAGE_NAME: keiko-dapp

jobs:
  # =============================================================================
  # Job para Feature Branches
  # =============================================================================
  feature-test:
    if: startsWith(github.ref, 'refs/heads/feature/')
    runs-on: ubuntu-latest
    name: Test Feature Branch
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Configurar Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          
      - name: Cache dependencias Rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Ejecutar tests unitarios
        run: |
          echo "üß™ Ejecutando tests para feature branch..."
          cargo test --workspace
          
      - name: Linting y formato
        run: |
          echo "üîç Verificando formato de c√≥digo..."
          cargo fmt -- --check
          cargo clippy -- -D warnings

  # =============================================================================
  # Job para Develop Branch
  # =============================================================================
  develop-deploy:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    name: Deploy to Development
    environment: development
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Configurar Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          
      - name: Login a OVH Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.OVH_REGISTRY_USERNAME }}
          password: ${{ secrets.OVH_REGISTRY_PASSWORD }}
          
      - name: Build y push imagen
        run: |
          echo "üèóÔ∏è Construyendo imagen para desarrollo..."
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }} .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }}
          
      - name: Deploy a Kubernetes Dev
        run: |
          echo "üöÄ Desplegando a entorno de desarrollo..."
          # Aqu√≠ ir√≠an los comandos de kubectl para desplegar
          echo "Deploy completado en desarrollo"

  # =============================================================================
  # Job para Release Branches
  # =============================================================================
  release-test:
    if: startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    name: Test Release Candidate
    environment: staging
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Configurar Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          
      - name: Ejecutar tests completos
        run: |
          echo "üß™ Ejecutando test suite completo para release..."
          cargo test --workspace
          cargo test --workspace --release
          
      - name: Tests de integraci√≥n
        run: |
          echo "üîó Ejecutando tests de integraci√≥n..."
          # Aqu√≠ ir√≠an los tests de integraci√≥n espec√≠ficos
          
      - name: Build imagen de staging
        run: |
          echo "üèóÔ∏è Construyendo imagen para staging..."
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }} .
          
      - name: Deploy a Staging
        run: |
          echo "üöÄ Desplegando a staging para pruebas..."
          # Deploy a staging para pruebas de UAT

  # =============================================================================
  # Job para Main Branch (Production)
  # =============================================================================
  production-deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Deploy to Production
    environment: production
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Configurar Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          
      - name: Login a OVH Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.OVH_REGISTRY_USERNAME }}
          password: ${{ secrets.OVH_REGISTRY_PASSWORD }}
          
      - name: Build imagen de producci√≥n
        run: |
          echo "üèóÔ∏è Construyendo imagen para producci√≥n..."
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ github.run_number }} .
          
      - name: Push im√°genes
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ github.run_number }}
          
      - name: Deploy a Producci√≥n
        run: |
          echo "üöÄ Desplegando a producci√≥n..."
          # Deploy a producci√≥n con confirmaci√≥n manual
          
      - name: Notificar despliegue
        run: |
          echo "üì¢ Notificando despliegue exitoso..."
          # Aqu√≠ ir√≠an notificaciones a Slack, Discord, etc.

  # =============================================================================
  # Job para Hotfix Branches
  # =============================================================================
  hotfix-deploy:
    if: startsWith(github.ref, 'refs/heads/hotfix/')
    runs-on: ubuntu-latest
    name: Emergency Hotfix Deploy
    environment: production
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Configurar Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          
      - name: Tests cr√≠ticos para hotfix
        run: |
          echo "üö® Ejecutando tests cr√≠ticos para hotfix..."
          cargo test --workspace --release
          
      - name: Build imagen de hotfix
        run: |
          echo "üèóÔ∏è Construyendo imagen de hotfix..."
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:hotfix-${{ github.sha }} .
          
      - name: Deploy hotfix a producci√≥n
        run: |
          echo "üö® Desplegando hotfix a producci√≥n..."
          # Deploy de emergencia con validaci√≥n m√≠nima
          
      - name: Notificar hotfix
        run: |
          echo "üö® Notificando hotfix desplegado..."
          # Notificaci√≥n de emergencia

  # =============================================================================
  # Job de Notificaciones
  # =============================================================================
  notify:
    needs: [feature-test, develop-deploy, release-test, production-deploy, hotfix-deploy]
    runs-on: ubuntu-latest
    name: Notify Team
    if: always()
    
    steps:
      - name: Notificar resultado
        run: |
          echo "üì¢ Notificando resultado del pipeline..."
          # Aqu√≠ ir√≠an las notificaciones seg√∫n el resultado
